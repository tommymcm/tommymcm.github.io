digraph "llvm::iterator_adaptor_base&lt; DerivedT, WrappedIteratorT, IteratorCategoryT, T, DifferenceTypeT, PointerT, ReferenceT &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="std::iterator\< IteratorCategory\lT, T, std::ptrdiff_t, T *, T & \>",height=0.2,width=0.4,color="black",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::ImutAVLValueIterator\l\< ImmutableMap \>",height=0.2,width=0.4,color="red",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip=" "];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="llvm::ImmutableMap\l\< KeyT, ValT, ValInfo\l \>::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImmutableMap_1_1iterator.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::ImutAVLValueIterator\l\< ImmutableMapRef \>",height=0.2,width=0.4,color="red",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip=" "];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::ImmutableMapRef\l\< KeyT, ValT, ValInfo\l \>::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImmutableMapRef_1_1iterator.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="llvm::filter_iterator\l_impl\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__impl_3_01WrappedIteratorT_00_01PredicateT_00_01std_1_1bidirectional__iterator__tag_01_4.html",tooltip="Specialization of filter_iterator_base for bidirectional iteration."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::mapped_iterator\l\< ItTy, FuncTy, FuncReturnTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1mapped__iterator.html",tooltip=" "];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::pointee_iterator\l\< WrappedIteratorT, T \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1pointee__iterator.html",tooltip="An iterator type that allows iterating over the pointees via some other iterator."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::pointer_iterator\l\< WrappedIteratorT, T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1pointer__iterator.html",tooltip=" "];
  Node1 -> Node14 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< IteratorImpl\< ValueT,\l IteratorBase \>, IteratorBase,\l std::bidirectional_iterator\l_tag, ValueT \>" ,fontname="Helvetica"];
  Node14 [label="llvm::iterator_adaptor\l_base\< IteratorImpl\< ValueT,\l IteratorBase \>, IteratorBase,\l std::bidirectional_iterator\l_tag, ValueT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node15 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_succ_op_iterator,\l const_value_op_iterator,\l std::random_access_iterator\l_tag, const BasicBlock *, ptrdiff\l_t, const BasicBlock *, const BasicBlock * \>" ,fontname="Helvetica"];
  Node15 [label="llvm::iterator_adaptor\l_base\< const_succ_op_iterator,\l const_value_op_iterator, std\l::random_access_iterator_tag,\l const BasicBlock *, ptrdiff_t,\l const BasicBlock *, const BasicBlock * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="llvm::BranchInst::const\l_succ_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1BranchInst_1_1const__succ__op__iterator.html",tooltip="The const version of succ_op_iterator."];
  Node15 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="llvm::IndirectBrInst\l::const_succ_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1IndirectBrInst_1_1const__succ__op__iterator.html",tooltip="The const version of succ_op_iterator."];
  Node1 -> Node18 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< succ_op_iterator,\l value_op_iterator,\l std::random_access_iterator\l_tag, BasicBlock *, ptrdiff\l_t, BasicBlock *, BasicBlock * \>" ,fontname="Helvetica"];
  Node18 [label="llvm::iterator_adaptor\l_base\< succ_op_iterator,\l value_op_iterator, std\l::random_access_iterator\l_tag, BasicBlock *, ptrdiff\l_t, BasicBlock *, BasicBlock * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="llvm::BranchInst::succ\l_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1BranchInst_1_1succ__op__iterator.html",tooltip="Iterator type that casts an operand to a basic block."];
  Node18 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="llvm::IndirectBrInst\l::succ_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1IndirectBrInst_1_1succ__op__iterator.html",tooltip="Iterator type that casts an operand to a basic block."];
  Node1 -> Node21 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_value_iterator,\l ListTy::const_iterator,\l std::forward_iterator_tag,\l const DIEValue \>" ,fontname="Helvetica"];
  Node21 [label="llvm::iterator_adaptor\l_base\< const_value_iterator,\l ListTy::const_iterator, std\l::forward_iterator_tag, const\l DIEValue \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="llvm::DIEValueList\l::const_value_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DIEValueList_1_1const__value__iterator.html",tooltip=" "];
  Node1 -> Node23 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< value_iterator, ListTy\l::iterator, std::forward\l_iterator_tag, DIEValue \>" ,fontname="Helvetica"];
  Node23 [label="llvm::iterator_adaptor\l_base\< value_iterator,\l ListTy::iterator, std\l::forward_iterator_tag,\l DIEValue \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node23 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="llvm::DIEValueList\l::value_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DIEValueList_1_1value__iterator.html",tooltip=" "];
  Node1 -> Node25 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ChildIteratorType,\l SmallVector\< BoUpSLP\l::EdgeInfo, 1 \>::iterator \>" ,fontname="Helvetica"];
  Node25 [label="llvm::iterator_adaptor\l_base\< ChildIteratorType,\l SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="llvm::GraphTraits\<\l BoUpSLP * \>::ChildIteratorType",height=0.2,width=0.4,color="black",URL="$structllvm_1_1GraphTraits_3_01BoUpSLP_01_5_01_4_1_1ChildIteratorType.html",tooltip="Add the VectorizableTree to the index iterator to be able to return TreeEntry pointers."];
  Node1 -> Node27 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< ImmutableMap \>, T::TreeTy\l::iterator, std::iterator\l_traits\< T::TreeTy::iterator\l \>::iterator_category, const\l T::value_type \>" ,fontname="Helvetica"];
  Node27 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< ImmutableMap \>, T::TreeTy\l::iterator, std::iterator_traits\l\< T::TreeTy::iterator \>::iterator\l_category, const T::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node28 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< ImmutableMapRef \>, T\l::TreeTy::iterator, std\l::iterator_traits\< T::TreeTy\l::iterator \>::iterator_category,\l const T::value_type \>" ,fontname="Helvetica"];
  Node28 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< ImmutableMapRef \>, T::TreeTy\l::iterator, std::iterator_traits\l\< T::TreeTy::iterator \>::iterator\l_category, const T::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node29 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T\l::TreeTy::iterator \>::iterator\l_category, const T::value_type \>" ,fontname="Helvetica"];
  Node29 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T::TreeTy\l::iterator \>::iterator_category,\l const T::value_type \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node31 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< call_iterator, VectorImpl\lT::iterator, std::forward\l_iterator_tag \>" ,fontname="Helvetica"];
  Node31 [label="llvm::iterator_adaptor\l_base\< call_iterator,\l VectorImplT::iterator,\l std::forward_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node33 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< iterator, VectorImplT\l::iterator, std::forward\l_iterator_tag \>" ,fontname="Helvetica"];
  Node33 [label="llvm::iterator_adaptor\l_base\< iterator, VectorImplT\l::iterator, std::forward_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node35 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< WrappedSuccIterator,\l succ_iterator, std::\literator_traits\< succ\l_iterator \>::iterator_category,\l NodeRef, std::ptrdiff_t, NodeRef\l *, NodeRef \>" ,fontname="Helvetica"];
  Node35 [label="llvm::iterator_adaptor\l_base\< WrappedSuccIterator,\l succ_iterator, std::iterator\l_traits\< succ_iterator \>::iterator\l_category, NodeRef, std::ptrdiff\l_t, NodeRef *, NodeRef \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node37 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_export_iterator,\l const_symbol_iterator,\l std::forward_iterator\l_tag, const Symbol * \>" ,fontname="Helvetica"];
  Node37 [label="llvm::iterator_adaptor\l_base\< const_export_iterator,\l const_symbol_iterator, std\l::forward_iterator_tag, const\l Symbol * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node39 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_symbol_iterator,\l SymbolMapType::const\l_iterator, std::forward\l_iterator_tag, const Symbol\l *, ptrdiff_t, const Symbol\l *, const Symbol * \>" ,fontname="Helvetica"];
  Node39 [label="llvm::iterator_adaptor\l_base\< const_symbol_iterator,\l SymbolMapType::const_iterator,\l std::forward_iterator_tag, const\l Symbol *, ptrdiff_t, const Symbol\l *, const Symbol * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node41 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_undefined_iterator,\l const_symbol_iterator,\l std::forward_iterator_tag,\l const Symbol * \>" ,fontname="Helvetica"];
  Node41 [label="llvm::iterator_adaptor\l_base\< const_undefined\l_iterator, const_symbol\l_iterator, std::forward\l_iterator_tag, const Symbol * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node43 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, SDValue,\l ptrdiff_t, value_op_iterator\l *, value_op_iterator * \>" ,fontname="Helvetica"];
  Node43 [label="llvm::iterator_adaptor\l_base\< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, SDValue,\l ptrdiff_t, value_op_iterator\l *, value_op_iterator * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node45 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< StringMapKeyIterator\l\< ValueTy \>, StringMapConstIterator\l\< ValueTy \>, std::forward_iterator\l_tag, StringRef \>" ,fontname="Helvetica"];
  Node45 [label="llvm::iterator_adaptor\l_base\< StringMapKeyIterator\l\< ValueTy \>, StringMapConstIterator\l\< ValueTy \>, std::forward_iterator\l_tag, StringRef \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node47 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_value_op_iterator,\l const_op_iterator, std\l::random_access_iterator\l_tag, const Value *, ptrdiff\l_t, const Value *, const Value * \>" ,fontname="Helvetica"];
  Node47 [label="llvm::iterator_adaptor\l_base\< const_value_op\l_iterator, const_op_iterator,\l std::random_access_iterator\l_tag, const Value *, ptrdiff\l_t, const Value *, const Value * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node49 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, Value\l *, ptrdiff_t, Value *, Value * \>" ,fontname="Helvetica"];
  Node49 [label="llvm::iterator_adaptor\l_base\< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, Value\l *, ptrdiff_t, Value *, Value * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node51 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< WrappedPairNodeDataIterator\l\< ItType, NodeRef, DataRef\l \>, ItType, std::iterator_traits\l\< ItType \>::iterator_category,\l NodeRef, std::ptrdiff_t, NodeRef\l *, NodeRef & \>" ,fontname="Helvetica"];
  Node51 [label="llvm::iterator_adaptor\l_base\< WrappedPairNodeDataIterator\l\< ItType, NodeRef, DataRef \>,\l ItType, std::iterator_traits\l\< ItType \>::iterator_category,\l NodeRef, std::ptrdiff_t, NodeRef\l *, NodeRef & \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node53 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< early_inc_iterator\l_impl\< WrappedIteratorT\l \>, WrappedIteratorT, std\l::input_iterator_tag \>" ,fontname="Helvetica"];
  Node53 [label="llvm::iterator_adaptor\l_base\< early_inc_iterator\l_impl\< WrappedIteratorT \>\l, WrappedIteratorT, std::input\l_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node55 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, IterTag \>, WrappedIteratorT,\l std::common_type\< IterTag, std\l::iterator_traits\< WrappedIteratorT\l \>::iterator_category \>::type \>" ,fontname="Helvetica"];
  Node55 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>,\l WrappedIteratorT, std::common\l_type\< IterTag, std::iterator\l_traits\< WrappedIteratorT \>::iterator\l_category \>::type \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node58 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, std::forward_iterator_tag\l \>, WrappedIteratorT, std::common\l_type\< std::forward_iterator_tag,\l std::iterator_traits\< WrappedIteratorT\l \>::iterator_category \>::type \>" ,fontname="Helvetica"];
  Node58 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>, WrappedIteratorT,\l std::common_type\< std::forward\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node59 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, std::bidirectional_iterator\l_tag \>, WrappedIteratorT, std\l::common_type\< std::bidirectional\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \>::type \>" ,fontname="Helvetica"];
  Node59 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>, WrappedIteratorT,\l std::common_type\< std::bidirectional\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node60 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< mapped_iterator\<\l ItTy, FuncTy \>, ItTy,\l std::iterator_traits\l\< ItTy \>::iterator_category,\l std::remove_reference\< decltype\l(std::declval\< FuncTy \>()(*std\l::declval\< ItTy \>())) \>::type \>" ,fontname="Helvetica"];
  Node60 [label="llvm::iterator_adaptor\l_base\< mapped_iterator\l\< ItTy, FuncTy \>, ItTy,\l std::iterator_traits\< ItTy\l \>::iterator_category, std\l::remove_reference\< decltype\l(std::declval\< FuncTy \>()(*std\l::declval\< ItTy \>())) \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node61 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>" ,fontname="Helvetica"];
  Node61 [label="llvm::iterator_adaptor\l_base\< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node63 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< pointee_iterator\l\< WrappedIteratorT,\l typename std::remove\l_reference\< decltype(**std\l::declval\< WrappedIteratorT\l \>())\>::type \>, WrappedIteratorT,\l std::iterator_traits\< WrappedIteratorT\l \>::iterator_category, typename std\l::remove_reference\< decltype(**std::declval\l\< WrappedIteratorT \>())\>::type \>" ,fontname="Helvetica"];
  Node63 [label="llvm::iterator_adaptor\l_base\< pointee_iterator\l\< WrappedIteratorT, typename\l std::remove_reference\< decltype\l(**std::declval\< WrappedIteratorT\l \>())\>::type \>, WrappedIteratorT,\l std::iterator_traits\< WrappedIteratorT\l \>::iterator_category, typename std::remove\l_reference\< decltype(**std::declval\< WrappedIteratorT\l \>())\>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node64 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< pointer_iterator\l\< WrappedIteratorT,\l decltype(&*std::declval\l\< WrappedIteratorT \>())\l \>, WrappedIteratorT, std\l::iterator_traits\< WrappedIterator\lT \>::iterator_category, decltype\l(&*std::declval\< WrappedIteratorT \>()) \>" ,fontname="Helvetica"];
  Node64 [label="llvm::iterator_adaptor\l_base\< pointer_iterator\l\< WrappedIteratorT, decltype\l(&*std::declval\< WrappedIteratorT\l \>()) \>, WrappedIteratorT, std\l::iterator_traits\< WrappedIteratorT\l \>::iterator_category, decltype(&*std\l::declval\< WrappedIteratorT \>()) \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node65 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< NeighborEdgeIteratorT\l\< IsConst, IsOut \>, typename\l NeighborSetT::const_iterator,\l std::iterator_traits\< typename\l NeighborSetT::const_iterator \>\l::iterator_category, typename std\l::conditional\< IsConst, const EdgeValueType,\l EdgeValueType \>::type \>" ,fontname="Helvetica"];
  Node65 [label="llvm::iterator_adaptor\l_base\< NeighborEdgeIteratorT\l\< IsConst, IsOut \>, typename\l NeighborSetT::const_iterator,\l std::iterator_traits\< typename\l NeighborSetT::const_iterator \>\l::iterator_category, typename std\l::conditional\< IsConst, const EdgeValueType,\l EdgeValueType \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
}

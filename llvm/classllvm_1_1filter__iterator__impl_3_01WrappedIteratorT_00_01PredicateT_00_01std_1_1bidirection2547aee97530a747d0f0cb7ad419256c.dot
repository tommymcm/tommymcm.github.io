digraph "llvm::filter_iterator_impl&lt; WrappedIteratorT, PredicateT, std::bidirectional_iterator_tag &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::filter_iterator\l_impl\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Specialization of filter_iterator_base for bidirectional iteration."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="std::iterator\< IteratorCategory\lT, T, std::ptrdiff_t, T *, T & \>",height=0.2,width=0.4,color="black",tooltip=" "];
  Node6 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>" ,fontname="Helvetica"];
  Node6 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip="An iterator adaptor that filters the elements of given inner iterators."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>,\l WrappedIteratorT, std::common\l_type\< IterTag, std::iterator\l_traits\< WrappedIteratorT \>::iterator\l_category \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, IterTag \>, WrappedIteratorT,\l std::common_type\< IterTag, std\l::iterator_traits\< WrappedIteratorT\l \>::iterator_category \>::type \>" ,fontname="Helvetica"];
  Node9 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node4 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
}

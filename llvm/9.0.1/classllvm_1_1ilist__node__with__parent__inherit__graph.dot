digraph "llvm::ilist_node_with_parent&lt; NodeTy, ParentTy, Options &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::ilist_node_with\l_parent\< NodeTy, ParentTy,\l Options \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="An ilist node that can access its parent list."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::ilist_node\< NodeTy,\l Options... \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::ilist_node_impl\l\< OptionsT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__impl.html",tooltip="Implementation for an ilist node."];
  Node4 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="OptionsT::node_base_type",height=0.2,width=0.4,color="black",tooltip=" "];
  Node5 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< NodeTy, Options... \>" ,fontname="Helvetica"];
  Node5 [label="llvm::ilist_node\< T,\l Options \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::ilist_node_impl\l\< ilist_detail::compute\l_node_options\< T, Options...\l \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__impl.html",tooltip=" "];
  Node4 -> Node6 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ilist_detail::compute\l_node_options\< T, Options...\l \>::type \>" ,fontname="Helvetica"];
  Node7 [label="llvm::ilist_node_impl\l\< OptionsT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__impl.html",tooltip="Implementation for an ilist node."];
  Node4 -> Node7 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BasicBlock, Function \>" ,fontname="Helvetica"];
  Node8 [label="llvm::ilist_node_with\l_parent\< BasicBlock,\l Function \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::BasicBlock",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BasicBlock.html",tooltip="LLVM Basic Block Representation."];
  Node1 -> Node10 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< Instruction, BasicBlock \>" ,fontname="Helvetica"];
  Node10 [label="llvm::ilist_node_with\l_parent\< Instruction,\l BasicBlock \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::Instruction",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Instruction.html",tooltip=" "];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::AtomicCmpXchgInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AtomicCmpXchgInst.html",tooltip="An instruction that atomically checks whether a specified value is in a memory location,..."];
  Node11 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::AtomicRMWInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AtomicRMWInst.html",tooltip="an instruction that atomically reads a memory location, combines it with another value,..."];
  Node11 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="llvm::BinaryOperator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BinaryOperator.html",tooltip=" "];
  Node11 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="llvm::BranchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BranchInst.html",tooltip="Conditional or Unconditional Branch instruction."];
  Node11 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="llvm::CallBase",height=0.2,width=0.4,color="red",URL="$classllvm_1_1CallBase.html",tooltip="Base class for all callable instructions (InvokeInst and CallInst) Holds everything related to callin..."];
  Node11 -> Node76 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node76 [label="llvm::CatchReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CatchReturnInst.html",tooltip=" "];
  Node11 -> Node77 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node77 [label="llvm::CatchSwitchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CatchSwitchInst.html",tooltip=" "];
  Node11 -> Node78 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node78 [label="llvm::CleanupReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CleanupReturnInst.html",tooltip=" "];
  Node11 -> Node79 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node79 [label="llvm::CmpInst",height=0.2,width=0.4,color="red",URL="$classllvm_1_1CmpInst.html",tooltip="This class is the base class for the comparison instructions."];
  Node11 -> Node82 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node82 [label="llvm::ExtractElementInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ExtractElementInst.html",tooltip="This instruction extracts a single (scalar) element from a VectorType value."];
  Node11 -> Node83 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node83 [label="llvm::FenceInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FenceInst.html",tooltip="An instruction for ordering other memory operations."];
  Node11 -> Node84 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node84 [label="llvm::FuncletPadInst",height=0.2,width=0.4,color="red",URL="$classllvm_1_1FuncletPadInst.html",tooltip=" "];
  Node11 -> Node87 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node87 [label="llvm::GetElementPtrInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1GetElementPtrInst.html",tooltip="an instruction for type-safe pointer arithmetic to access elements of arrays and structs"];
  Node11 -> Node88 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node88 [label="llvm::IndirectBrInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IndirectBrInst.html",tooltip="Indirect Branch Instruction."];
  Node11 -> Node89 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node89 [label="llvm::InsertElementInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InsertElementInst.html",tooltip="This instruction inserts a single (scalar) element into a VectorType value."];
  Node11 -> Node90 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node90 [label="llvm::InsertValueInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InsertValueInst.html",tooltip="This instruction inserts a struct field of array element value into an aggregate value."];
  Node11 -> Node91 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node91 [label="llvm::LandingPadInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LandingPadInst.html",tooltip="The landingpad instruction holds all of the information necessary to generate correct exception handl..."];
  Node11 -> Node92 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node92 [label="llvm::PHINode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PHINode.html",tooltip=" "];
  Node11 -> Node93 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node93 [label="llvm::ResumeInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ResumeInst.html",tooltip="Resume the propagation of an exception."];
  Node11 -> Node94 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node94 [label="llvm::ReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ReturnInst.html",tooltip="Return a value (possibly void), from a function."];
  Node11 -> Node95 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node95 [label="llvm::SelectInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SelectInst.html",tooltip="This class represents the LLVM 'select' instruction."];
  Node11 -> Node96 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node96 [label="llvm::ShuffleVectorInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ShuffleVectorInst.html",tooltip="This instruction constructs a fixed permutation of two input vectors."];
  Node11 -> Node97 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node97 [label="llvm::StoreInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StoreInst.html",tooltip="An instruction for storing to memory."];
  Node11 -> Node98 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node98 [label="llvm::SwitchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SwitchInst.html",tooltip="Multiway switch."];
  Node11 -> Node99 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node99 [label="llvm::UnaryInstruction",height=0.2,width=0.4,color="red",URL="$classllvm_1_1UnaryInstruction.html",tooltip=" "];
  Node11 -> Node119 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node119 [label="llvm::UnreachableInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1UnreachableInst.html",tooltip="This function has undefined behavior."];
  Node1 -> Node120 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< MCFragment, MCSection \>" ,fontname="Helvetica"];
  Node120 [label="llvm::ilist_node_with\l_parent\< MCFragment,\l MCSection \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node120 -> Node121 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node121 [label="llvm::MCFragment",height=0.2,width=0.4,color="red",URL="$classllvm_1_1MCFragment.html",tooltip=" "];
  Node121 -> Node122 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node122 [label="llvm::MCAlignFragment",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MCAlignFragment.html",tooltip=" "];
  Node121 -> Node123 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node123 [label="llvm::MCCVInlineLineTable\lFragment",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MCCVInlineLineTableFragment.html",tooltip="Fragment representing the binary annotations produced by the .cv_inline_linetable directive."];
  Node121 -> Node124 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node124 [label="llvm::MCDummyFragment",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MCDummyFragment.html",tooltip=" "];
  Node121 -> Node125 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node125 [label="llvm::MCDwarfCallFrameFragment",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MCDwarfCallFrameFragment.html",tooltip=" "];
  Node1 -> Node142 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< MachineBasicBlock,\l MachineFunction \>" ,fontname="Helvetica"];
  Node142 [label="llvm::ilist_node_with\l_parent\< MachineBasicBlock,\l MachineFunction \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node142 -> Node143 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node143 [label="llvm::MachineBasicBlock",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MachineBasicBlock.html",tooltip=" "];
  Node1 -> Node144 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< MachineInstr, MachineBasic\lBlock, ilist_sentinel_tracking\l\< true \> \>" ,fontname="Helvetica"];
  Node144 [label="llvm::ilist_node_with\l_parent\< MachineInstr,\l MachineBasicBlock, ilist\l_sentinel_tracking\< true \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node144 -> Node145 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node145 [label="llvm::MachineInstr",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MachineInstr.html",tooltip="Representation of each machine instruction."];
  Node1 -> Node146 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< VPRecipeBase, VPBasicBlock \>" ,fontname="Helvetica"];
  Node146 [label="llvm::ilist_node_with\l_parent\< VPRecipeBase,\l VPBasicBlock \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node146 -> Node147 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node147 [label="llvm::VPRecipeBase",height=0.2,width=0.4,color="red",URL="$classllvm_1_1VPRecipeBase.html",tooltip="VPRecipeBase is a base class modeling a sequence of one or more output IR instructions."];
}

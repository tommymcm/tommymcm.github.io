digraph "llvm::ValueHandleBase"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::ValueHandleBase",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="This is the common base class of value handles."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::AssertingVH\<\l Instruction \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AssertingVH.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::AssertingVH\<\l llvm::Value \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AssertingVH.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::AssertingVH\<\l llvm::BasicBlock \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AssertingVH.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="llvm::AssertingVH\<\l llvm::PHINode \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AssertingVH.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::AssertingVH\<\l ValueTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AssertingVH.html",tooltip="Value handle that asserts if the Value is deleted."];
  Node6 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< Instruction \>" ,fontname="Helvetica"];
  Node6 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::Value \>" ,fontname="Helvetica"];
  Node6 -> Node4 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::BasicBlock \>" ,fontname="Helvetica"];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::PHINode \>" ,fontname="Helvetica"];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::CallbackVH",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CallbackVH.html",tooltip="Value handle with callbacks on RAUW and destruction."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::PoisoningVH\<\l llvm::BasicBlock \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PoisoningVH.html",tooltip=" "];
  Node7 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::IVStrideUse",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IVStrideUse.html",tooltip="IVStrideUse - Keep track of one use of a strided induction variable."];
  Node7 -> Node10 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="llvm::MMIAddrLabelMapCallbackPtr",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MMIAddrLabelMapCallbackPtr.html",tooltip=" "];
  Node7 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::PoisoningVH\<\l ValueTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PoisoningVH.html",tooltip="Value handle that poisons itself if the Value is deleted."];
  Node11 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::BasicBlock \>" ,fontname="Helvetica"];
  Node7 -> Node12 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::SCEVUnknown",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEVUnknown.html",tooltip="This means that we are dealing with an entirely unknown SCEV value, and only represent it as its LLVM..."];
  Node7 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::ValueMapCallbackVH\l\< KeyT, ValueT, Config \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ValueMapCallbackVH.html",tooltip=" "];
  Node7 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="llvm::cflaa::FunctionHandle\l\< AAResult \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1cflaa_1_1FunctionHandle.html",tooltip=" "];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="llvm::WeakTrackingVH",height=0.2,width=0.4,color="black",URL="$classllvm_1_1WeakTrackingVH.html",tooltip="Value handle that is nullable, but tries to track the Value."];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="llvm::WeakVH",height=0.2,width=0.4,color="black",URL="$classllvm_1_1WeakVH.html",tooltip="A nullable Value handle that is nullable."];
}

digraph "llvm::FoldingSetBase::Node"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::FoldingSetBase\l::Node",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Node - This class is used to maintain the singly linked bucket list in a folding set."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::AttributeImpl",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AttributeImpl.html",tooltip=" "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::EnumAttributeImpl",height=0.2,width=0.4,color="red",URL="$classllvm_1_1EnumAttributeImpl.html",tooltip=" "];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::StringAttributeImpl",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StringAttributeImpl.html",tooltip=" "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::AttributeListImpl",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AttributeListImpl.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::AttributeSetNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AttributeSetNode.html",tooltip=" "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::BinOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BinOpInit.html",tooltip="!op (X, Y) - Combine two inits."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="llvm::BitsInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BitsInit.html",tooltip="'{ a, b, c }' - Represents an initializer for a BitsRecTy value."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::CondOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CondOpInit.html",tooltip="!cond(condition_1: value1, ... , condition_n: value) Selects the first value for which condition is t..."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::DIEAbbrev",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DIEAbbrev.html",tooltip="Dwarf abbreviation, describes the organization of a debug information object."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::DagInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DagInit.html",tooltip="(v a, b) - Represent a DAG tree value."];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="llvm::FastFoldingSetNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FastFoldingSetNode.html",tooltip="FastFoldingSetNode - This is a subclass of FoldingSetNode which stores a FoldingSetNodeID value rathe..."];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="llvm::FoldOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FoldOpInit.html",tooltip="!foldl (a, b, expr, start, lst) - Fold over a list."];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="llvm::FoldingSetNodeWrapper\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FoldingSetNodeWrapper.html",tooltip="FoldingSetNodeWrapper - This template class is used to \"wrap\" arbitrary types in an enclosing object ..."];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="llvm::ImmutableListImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImmutableListImpl.html",tooltip=" "];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="llvm::IsAOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IsAOpInit.html",tooltip="!isa<type>(expr) - Dynamically determine the type of an expression."];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="llvm::ListInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ListInit.html",tooltip="[AL, AH, CL] - Represent a list of defs"];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="llvm::RecordRecTy",height=0.2,width=0.4,color="black",URL="$classllvm_1_1RecordRecTy.html",tooltip="'[classname]' - Type of record values that have zero or more superclasses."];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="llvm::SCEV",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEV.html",tooltip="This class represents an analyzed expression in the program."];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="llvm::SCEVCastExpr",height=0.2,width=0.4,color="red",URL="$classllvm_1_1SCEVCastExpr.html",tooltip="This is the base class for unary cast operator classes."];
  Node21 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="llvm::SCEVConstant",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEVConstant.html",tooltip="This class represents a constant integer value."];
  Node21 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="llvm::SCEVCouldNotCompute",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SCEVCouldNotCompute.html",tooltip="An object of this class is returned by queries that could not be answered."];
  Node21 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="llvm::SCEVNAryExpr",height=0.2,width=0.4,color="red",URL="$classllvm_1_1SCEVNAryExpr.html",tooltip="This node is a base class providing common functionality for n'ary operators."];
  Node21 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="llvm::SCEVUDivExpr",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEVUDivExpr.html",tooltip="This class represents a binary unsigned division operation."];
  Node21 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="llvm::SCEVUnknown",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEVUnknown.html",tooltip="This means that we are dealing with an entirely unknown SCEV value, and only represent it as its LLVM..."];
  Node1 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="llvm::SCEVPredicate",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEVPredicate.html",tooltip="This class represents an assumption made using SCEV expressions which can be checked at run-time."];
  Node40 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="llvm::SCEVEqualPredicate",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEVEqualPredicate.html",tooltip="This class represents an assumption that two SCEV expressions are equal, and this can be checked at r..."];
  Node40 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="llvm::SCEVUnionPredicate",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEVUnionPredicate.html",tooltip="This class represents a composition of other SCEV predicates, and is the class that most clients will..."];
  Node40 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="llvm::SCEVWrapPredicate",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SCEVWrapPredicate.html",tooltip="This class represents an assumption made on an AddRec expression."];
  Node1 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="llvm::SDNode",height=0.2,width=0.4,color="red",URL="$classllvm_1_1SDNode.html",tooltip="Represents one node in the SelectionDAG."];
  Node44 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="llvm::AddrSpaceCastSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AddrSpaceCastSDNode.html",tooltip=" "];
  Node44 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="llvm::BasicBlockSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BasicBlockSDNode.html",tooltip=" "];
  Node44 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="llvm::BlockAddressSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BlockAddressSDNode.html",tooltip=" "];
  Node44 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="llvm::BuildVectorSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BuildVectorSDNode.html",tooltip="A \"pseudo-class\" with methods for operating on BUILD_VECTORs."];
  Node44 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="llvm::CondCodeSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CondCodeSDNode.html",tooltip=" "];
  Node44 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="llvm::ConstantFPSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ConstantFPSDNode.html",tooltip=" "];
  Node44 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="llvm::ConstantPoolSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ConstantPoolSDNode.html",tooltip=" "];
  Node44 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="llvm::ConstantSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ConstantSDNode.html",tooltip=" "];
  Node44 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="llvm::ExternalSymbolSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ExternalSymbolSDNode.html",tooltip=" "];
  Node44 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="llvm::FrameIndexSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FrameIndexSDNode.html",tooltip=" "];
  Node44 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="llvm::GlobalAddressSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1GlobalAddressSDNode.html",tooltip=" "];
  Node44 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="llvm::HandleSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1HandleSDNode.html",tooltip="This class is used to form a handle around another node that is persistent and is updated across invo..."];
  Node44 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node57 [label="llvm::JumpTableSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1JumpTableSDNode.html",tooltip=" "];
  Node44 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node58 [label="llvm::LabelSDNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LabelSDNode.html",tooltip=" "];
  Node1 -> Node90 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node90 [label="llvm::SDVTListNode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SDVTListNode.html",tooltip=" "];
  Node1 -> Node91 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node91 [label="llvm::TernOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1TernOpInit.html",tooltip="!op (X, Y, Z) - Combine two inits."];
  Node1 -> Node92 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node92 [label="llvm::UnOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1UnOpInit.html",tooltip="!op (X) - Transform an init."];
  Node1 -> Node93 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node93 [label="llvm::UniqueMachineInstr",height=0.2,width=0.4,color="black",URL="$classllvm_1_1UniqueMachineInstr.html",tooltip="A class that wraps MachineInstrs and derives from FoldingSetNode in order to be uniqued in a CSEMap."];
  Node1 -> Node94 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node94 [label="llvm::VarDefInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VarDefInit.html",tooltip="classname<targs...> - Represent an uninstantiated anonymous class instantiation."];
}

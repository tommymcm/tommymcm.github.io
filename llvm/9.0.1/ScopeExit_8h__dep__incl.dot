digraph "include/llvm/ADT/ScopeExit.h"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  Node1 [label="include/llvm/ADT/ScopeExit.h",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="lib/Analysis/IVDescriptors.cpp",height=0.2,width=0.4,color="black",URL="$IVDescriptors_8cpp.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="lib/Analysis/LazyCallGraph.cpp",height=0.2,width=0.4,color="black",URL="$LazyCallGraph_8cpp.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="lib/Analysis/LoopInfo.cpp",height=0.2,width=0.4,color="black",URL="$LoopInfo_8cpp.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="lib/Analysis/ScalarEvolution.cpp",height=0.2,width=0.4,color="black",URL="$ScalarEvolution_8cpp.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="lib/CodeGen/GlobalISel\l/IRTranslator.cpp",height=0.2,width=0.4,color="black",URL="$IRTranslator_8cpp.html",tooltip="This file implements the IRTranslator class."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="lib/CodeGen/IfConversion.cpp",height=0.2,width=0.4,color="black",URL="$IfConversion_8cpp.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="lib/CodeGen/ResetMachine\lFunctionPass.cpp",height=0.2,width=0.4,color="black",URL="$ResetMachineFunctionPass_8cpp.html",tooltip="This file implements a pass that will conditionally reset a machine function as if it was just create..."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="lib/Target/AArch64\l/AArch64FrameLowering.cpp",height=0.2,width=0.4,color="black",URL="$AArch64FrameLowering_8cpp.html",tooltip=" "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="lib/Target/X86/X86FlagsCopy\lLowering.cpp",height=0.2,width=0.4,color="black",URL="$X86FlagsCopyLowering_8cpp.html",tooltip="Lowers COPY nodes of EFLAGS by directly extracting and preserving individual flag bits."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="lib/Target/X86/X86Speculative\lLoadHardening.cpp",height=0.2,width=0.4,color="black",URL="$X86SpeculativeLoadHardening_8cpp.html",tooltip="Provide a pass which mitigates speculative execution attacks which operate by speculating incorrectly..."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="lib/Transforms/Utils\l/LoopUtils.cpp",height=0.2,width=0.4,color="black",URL="$LoopUtils_8cpp.html",tooltip=" "];
}

digraph "llvm::TargetLowering::CallLoweringInfo"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::TargetLowering\l::CallLoweringInfo",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="This structure contains all information that is necessary for lowering calls."];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Callee\nChain" ,fontname="Helvetica"];
  Node2 [label="llvm::SDValue",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SDValue.html",tooltip="Unlike LLVM values, Selection DAG nodes may return multiple values as the result of a computation."];
  Node3 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" RetTy" ,fontname="Helvetica"];
  Node3 [label="llvm::Type",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Type.html",tooltip="The instances of the Type class are immutable: once they are created, they are never changed."];
  Node4 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" NumContainedTys" ,fontname="Helvetica"];
  Node4 [label="unsigned",height=0.2,width=0.4,color="black",URL="$classunsigned.html",tooltip=" "];
  Node3 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ContainedTys" ,fontname="Helvetica"];
  Node5 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" DoesNotReturn\nIsConvergent\nIsInReg\nIsPatchPoint\nIsPostTypeLegalization\nIsReturnValueUsed\nIsTailCall\nIsVarArg\nRetSExt\nRetZExt\n..." ,fontname="Helvetica"];
  Node5 [label="bool",height=0.2,width=0.4,color="black",URL="$classbool.html",tooltip=" "];
  Node4 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" CallConv\nNumFixedArgs" ,fontname="Helvetica"];
  Node6 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Args" ,fontname="Helvetica"];
  Node6 [label="ArgListTy",height=0.2,width=0.4,color="black",tooltip=" "];
  Node7 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" DAG" ,fontname="Helvetica"];
  Node7 [label="llvm::SelectionDAG",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SelectionDAG.html",tooltip="This is used to represent a portion of an LLVM function in a low-level Data Dependence DAG representa..."];
  Node5 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" NewNodesMustHaveLegalTypes" ,fontname="Helvetica"];
  Node8 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" NodeGraphAttrs" ,fontname="Helvetica"];
  Node8 [label="map\< const llvm::SDNode\l *, std::string \>",height=0.2,width=0.4,color="black",tooltip=" "];
  Node9 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" DL" ,fontname="Helvetica"];
  Node9 [label="llvm::SDLoc",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SDLoc.html",tooltip="Wrapper class for IR location info (IR ordering and DebugLoc) to be passed into SDNode creation funct..."];
  Node10 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" CS" ,fontname="Helvetica"];
  Node10 [label="llvm::ImmutableCallSite",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImmutableCallSite.html",tooltip="Establish a view to a call site for examination."];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::CallSiteBase\l\< FunTy, BBTy, ValTy,\l UserTy, UseTy, InstrTy,\l CallTy, InvokeTy, CallBrTy,\l IterTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CallSiteBase.html",tooltip=" "];
  Node12 -> Node11 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node12 [label="llvm::PointerIntPair\l\< const Instruction *,\l 2, int \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PointerIntPair.html",tooltip=" "];
  Node13 -> Node12 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const Instruction\l *, 2, int \>" ,fontname="Helvetica"];
  Node13 [label="llvm::PointerIntPair\l\< PointerTy, IntBits,\l IntType, PtrTraits, Info \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PointerIntPair.html",tooltip="PointerIntPair - This class implements a pair of a pointer and small integer."];
  Node14 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Outs" ,fontname="Helvetica"];
  Node14 [label="llvm::SmallVector\<\l llvm::ISD::OutputArg, 32 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node15 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node16 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="llvm::SmallVectorTemplate\lBase\< T, bool \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorTemplateBase.html",tooltip="SmallVectorTemplateBase<TriviallyCopyable = false> - This is where we put method implementations that..."];
  Node17 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="llvm::SmallVectorTemplate\lCommon\< T, typename \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorTemplateCommon.html",tooltip="This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD."];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="llvm::SmallVectorBase",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorBase.html",tooltip="This is all the non-templated stuff common to all SmallVectors."];
  Node19 -> Node18 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" BeginX" ,fontname="Helvetica"];
  Node19 [label="void *",height=0.2,width=0.4,color="black",tooltip=" "];
  Node4 -> Node18 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Capacity\nSize" ,fontname="Helvetica"];
  Node20 -> Node14 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node21 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node21 [label="llvm::AlignedCharArrayUnion\< T \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AlignedCharArrayUnion.html",tooltip=" "];
  Node22 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="llvm::AlignedCharArray\l\< Alignment, Size \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AlignedCharArray.html",tooltip="Helper for building an aligned character array type."];
  Node23 -> Node22 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" buffer" ,fontname="Helvetica"];
  Node23 [label="char",height=0.2,width=0.4,color="black",URL="$classchar.html",tooltip=" "];
  Node24 -> Node21 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< T \>" ,fontname="Helvetica"];
  Node24 [label="llvm::AlignedCharArrayUnion\l\< T1, T2, T3, T4, T5, T6,\l T7, T8, T9, T10 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AlignedCharArrayUnion.html",tooltip="This union template exposes a suitably aligned and sized character array member which can hold elemen..."];
  Node25 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="llvm::AlignedCharArray\l\< Alignment, Size \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AlignedCharArray.html",tooltip="Helper for building an aligned character array type."];
  Node23 -> Node25 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" buffer" ,fontname="Helvetica"];
  Node26 -> Node14 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::ISD::OutputArg,\l 32 \>" ,fontname="Helvetica"];
  Node26 [label="llvm::SmallVector\<\l T, N \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip="This is a 'vector' (really, a variable-sized array), optimized for the case when the array is small."];
  Node27 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node16 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 -> Node26 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node21 -> Node28 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node29 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" OutVals" ,fontname="Helvetica"];
  Node29 [label="llvm::SmallVector\<\l llvm::SDValue, 32 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node30 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node16 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 -> Node29 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node21 -> Node31 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node26 -> Node29 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::SDValue, 32 \>" ,fontname="Helvetica"];
  Node32 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Ins" ,fontname="Helvetica"];
  Node32 [label="llvm::SmallVector\<\l llvm::ISD::InputArg, 32 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node33 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node16 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 -> Node32 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node21 -> Node34 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node26 -> Node32 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::ISD::InputArg,\l 32 \>" ,fontname="Helvetica"];
  Node35 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InVals" ,fontname="Helvetica"];
  Node35 [label="llvm::SmallVector\<\l llvm::SDValue, 4 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node30 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 -> Node35 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 -> Node35 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::SDValue, 4 \>" ,fontname="Helvetica"];
}

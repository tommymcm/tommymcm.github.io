digraph "llvm::pdb::GSIHashIterator"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::pdb::GSIHashIterator",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Iterator over hash records producing symbol record offsets."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_adaptor\l_base\< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="std::iterator\< IteratorCategory\lT, T, std::ptrdiff_t, T *, T & \>",height=0.2,width=0.4,color="black",tooltip=" "];
  Node5 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node5 [label="llvm::FixedStreamArrayIterator\l\< PSHashRecord \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FixedStreamArrayIterator.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< PSHashRecord \>" ,fontname="Helvetica"];
  Node7 [label="llvm::FixedStreamArrayIterator\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FixedStreamArrayIterator.html",tooltip=" "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::iterator_facade\l_base\< FixedStreamArrayIterator\l\< T \>, std::random_access_iterator\l_tag, const T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="std::iterator\< std\l::random_access_iterator\l_tag, const T, std::ptrdiff\l_t, const T *, const T & \>",height=0.2,width=0.4,color="black",tooltip=" "];
  Node10 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< FixedStreamArrayIterator\l\< T \>, std::random_access\l_iterator_tag, const T \>" ,fontname="Helvetica"];
  Node10 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node4 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>" ,fontname="Helvetica"];
  Node11 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node4 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 -> Node11 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node13 [label="WrappedIteratorT",height=0.2,width=0.4,color="black",URL="$classWrappedIteratorT.html",tooltip=" "];
}

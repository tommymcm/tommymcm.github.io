digraph "llvm::TypedInit"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::TypedInit",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="This is the common super-class of types that have a specific, explicit, type."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::Init",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Init.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::BitInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BitInit.html",tooltip="'true'/'false' - Represent a concrete initializer for a bit."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::BitsInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BitsInit.html",tooltip="'{ a, b, c }' - Represents an initializer for a BitsRecTy value."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="llvm::CodeInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CodeInit.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::CondOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CondOpInit.html",tooltip="!cond(condition_1: value1, ... , condition_n: value) Selects the first value for which condition is t..."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::DagInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DagInit.html",tooltip="(v a, b) - Represent a DAG tree value."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::DefInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DefInit.html",tooltip="AL - Represent a reference to a 'def' in the description."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::FieldInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FieldInit.html",tooltip="X.Y - Represent a reference to a subfield of a variable."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="llvm::FoldOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FoldOpInit.html",tooltip="!foldl (a, b, expr, start, lst) - Fold over a list."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::IntInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IntInit.html",tooltip="'7' - Represent an initialization by a literal integer value."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::IsAOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IsAOpInit.html",tooltip="!isa<type>(expr) - Dynamically determine the type of an expression."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::ListInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ListInit.html",tooltip="[AL, AH, CL] - Represent a list of defs"];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="llvm::OpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1OpInit.html",tooltip="Base class for operators."];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="llvm::BinOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BinOpInit.html",tooltip="!op (X, Y) - Combine two inits."];
  Node14 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="llvm::TernOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1TernOpInit.html",tooltip="!op (X, Y, Z) - Combine two inits."];
  Node14 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="llvm::UnOpInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1UnOpInit.html",tooltip="!op (X) - Transform an init."];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="llvm::StringInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StringInit.html",tooltip="\"foo\" - Represent an initialization by a string value."];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="llvm::VarBitInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VarBitInit.html",tooltip="Opcode{0} - Represent access to one bit of a variable or field."];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="llvm::VarDefInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VarDefInit.html",tooltip="classname<targs...> - Represent an uninstantiated anonymous class instantiation."];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="llvm::VarInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VarInit.html",tooltip="'Opcode' - Represent a reference to an entire variable object."];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="llvm::VarListElementInit",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VarListElementInit.html",tooltip="List[4] - Represent access to one element of a var or field."];
}

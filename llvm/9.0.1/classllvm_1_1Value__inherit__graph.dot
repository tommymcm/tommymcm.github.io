digraph "llvm::Value"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::Value",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="LLVM Value Representation."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::Argument",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Argument.html",tooltip="This class represents an incoming formal argument to a Function."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::BasicBlock",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BasicBlock.html",tooltip="LLVM Basic Block Representation."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::InlineAsm",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InlineAsm.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="llvm::MetadataAsValue",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MetadataAsValue.html",tooltip="Metadata wrapper in the Value hierarchy."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::User",height=0.2,width=0.4,color="black",URL="$classllvm_1_1User.html",tooltip=" "];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::Constant",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Constant.html",tooltip="This is an important base class in LLVM."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::BlockAddress",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BlockAddress.html",tooltip="The address of a basic block."];
  Node7 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::ConstantAggregate",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConstantAggregate.html",tooltip="Base class for aggregate constants (with operands)."];
  Node7 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::ConstantData",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConstantData.html",tooltip="Base class for constants with no operands."];
  Node7 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="llvm::ConstantExpr",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConstantExpr.html",tooltip="A constant value that is initialized with an expression using other constant values."];
  Node7 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="llvm::GlobalValue",height=0.2,width=0.4,color="red",URL="$classllvm_1_1GlobalValue.html",tooltip=" "];
  Node6 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="llvm::DerivedUser",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DerivedUser.html",tooltip="Extension point for the Value hierarchy."];
  Node41 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="llvm::MemoryAccess",height=0.2,width=0.4,color="red",URL="$classllvm_1_1MemoryAccess.html",tooltip=" "];
  Node6 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="llvm::Instruction",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Instruction.html",tooltip=" "];
  Node47 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="llvm::AtomicCmpXchgInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AtomicCmpXchgInst.html",tooltip="An instruction that atomically checks whether a specified value is in a memory location,..."];
  Node47 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="llvm::AtomicRMWInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AtomicRMWInst.html",tooltip="an instruction that atomically reads a memory location, combines it with another value,..."];
  Node47 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="llvm::BinaryOperator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BinaryOperator.html",tooltip=" "];
  Node47 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="llvm::BranchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BranchInst.html",tooltip="Conditional or Unconditional Branch instruction."];
  Node47 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="llvm::CallBase",height=0.2,width=0.4,color="red",URL="$classllvm_1_1CallBase.html",tooltip="Base class for all callable instructions (InvokeInst and CallInst) Holds everything related to callin..."];
  Node47 -> Node112 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node112 [label="llvm::CatchReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CatchReturnInst.html",tooltip=" "];
  Node47 -> Node113 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node113 [label="llvm::CatchSwitchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CatchSwitchInst.html",tooltip=" "];
  Node47 -> Node114 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node114 [label="llvm::CleanupReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CleanupReturnInst.html",tooltip=" "];
  Node47 -> Node115 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node115 [label="llvm::CmpInst",height=0.2,width=0.4,color="red",URL="$classllvm_1_1CmpInst.html",tooltip="This class is the base class for the comparison instructions."];
  Node47 -> Node118 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node118 [label="llvm::ExtractElementInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ExtractElementInst.html",tooltip="This instruction extracts a single (scalar) element from a VectorType value."];
  Node47 -> Node119 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node119 [label="llvm::FenceInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FenceInst.html",tooltip="An instruction for ordering other memory operations."];
  Node47 -> Node120 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node120 [label="llvm::FuncletPadInst",height=0.2,width=0.4,color="red",URL="$classllvm_1_1FuncletPadInst.html",tooltip=" "];
  Node47 -> Node123 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node123 [label="llvm::GetElementPtrInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1GetElementPtrInst.html",tooltip="an instruction for type-safe pointer arithmetic to access elements of arrays and structs"];
  Node47 -> Node124 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node124 [label="llvm::IndirectBrInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IndirectBrInst.html",tooltip="Indirect Branch Instruction."];
  Node47 -> Node125 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node125 [label="llvm::InsertElementInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InsertElementInst.html",tooltip="This instruction inserts a single (scalar) element into a VectorType value."];
  Node47 -> Node126 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node126 [label="llvm::InsertValueInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InsertValueInst.html",tooltip="This instruction inserts a struct field of array element value into an aggregate value."];
  Node47 -> Node127 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node127 [label="llvm::LandingPadInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LandingPadInst.html",tooltip="The landingpad instruction holds all of the information necessary to generate correct exception handl..."];
  Node47 -> Node128 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node128 [label="llvm::PHINode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PHINode.html",tooltip=" "];
  Node47 -> Node129 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node129 [label="llvm::ResumeInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ResumeInst.html",tooltip="Resume the propagation of an exception."];
  Node47 -> Node130 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node130 [label="llvm::ReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ReturnInst.html",tooltip="Return a value (possibly void), from a function."];
  Node47 -> Node131 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node131 [label="llvm::SelectInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SelectInst.html",tooltip="This class represents the LLVM 'select' instruction."];
  Node47 -> Node132 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node132 [label="llvm::ShuffleVectorInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ShuffleVectorInst.html",tooltip="This instruction constructs a fixed permutation of two input vectors."];
  Node47 -> Node133 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node133 [label="llvm::StoreInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StoreInst.html",tooltip="An instruction for storing to memory."];
  Node47 -> Node134 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node134 [label="llvm::SwitchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SwitchInst.html",tooltip="Multiway switch."];
  Node47 -> Node135 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node135 [label="llvm::UnaryInstruction",height=0.2,width=0.4,color="red",URL="$classllvm_1_1UnaryInstruction.html",tooltip=" "];
  Node47 -> Node155 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node155 [label="llvm::UnreachableInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1UnreachableInst.html",tooltip="This function has undefined behavior."];
  Node6 -> Node156 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node156 [label="llvm::Operator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Operator.html",tooltip="This is a utility class that provides an abstraction for the common functionality between Instruction..."];
  Node156 -> Node157 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node157 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::BitCast \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node156 -> Node159 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node159 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::GetElementPtr \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node156 -> Node161 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node161 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::PtrToInt \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node156 -> Node163 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node163 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::ZExt \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node156 -> Node165 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node165 [label="llvm::FPMathOperator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FPMathOperator.html",tooltip="Utility class for floating point operations which can have information about relaxed accuracy require..."];
  Node156 -> Node166 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node166 [label="llvm::OverflowingBinaryOperator",height=0.2,width=0.4,color="red",URL="$classllvm_1_1OverflowingBinaryOperator.html",tooltip="Utility class for integer operators which may exhibit overflow - Add, Sub, Mul, and Shl."];
  Node156 -> Node175 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node175 [label="llvm::PossiblyExactOperator",height=0.2,width=0.4,color="red",URL="$classllvm_1_1PossiblyExactOperator.html",tooltip="A udiv or sdiv instruction, which can be marked as \"exact\", indicating that no bits are destroyed."];
}

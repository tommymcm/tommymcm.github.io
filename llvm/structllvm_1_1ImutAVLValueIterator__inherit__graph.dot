digraph "llvm::ImutAVLValueIterator&lt; T &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::ImutAVLValueIterator\< T \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Generic iterator that wraps a T::TreeTy::iterator and exposes iterator::getValue() on dereference."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T::TreeTy\l::iterator \>::iterator_category,\l const T::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="std::iterator\< IteratorCategory\lT, T, std::ptrdiff_t, T *, T & \>",height=0.2,width=0.4,color="black",tooltip=" "];
  Node5 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T\l::TreeTy::iterator \>::iterator\l_category, const T::value_type \>" ,fontname="Helvetica"];
  Node5 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImmutableMap \>" ,fontname="Helvetica"];
  Node7 [label="llvm::ImutAVLValueIterator\l\< ImmutableMap \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip=" "];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::ImmutableMap\l\< KeyT, ValT, ValInfo\l \>::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImmutableMap_1_1iterator.html",tooltip=" "];
  Node1 -> Node9 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImmutableMapRef \>" ,fontname="Helvetica"];
  Node9 [label="llvm::ImutAVLValueIterator\l\< ImmutableMapRef \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip=" "];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="llvm::ImmutableMapRef\l\< KeyT, ValT, ValInfo\l \>::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImmutableMapRef_1_1iterator.html",tooltip=" "];
}

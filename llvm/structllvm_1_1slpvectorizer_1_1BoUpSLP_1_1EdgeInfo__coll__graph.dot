digraph "llvm::slpvectorizer::BoUpSLP::EdgeInfo"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node1 [label="llvm::slpvectorizer\l::BoUpSLP::EdgeInfo",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="This structure holds any data we need about the edges being traversed during buildTree_rec()."];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" UserTE" ,fontname="Helvetica"];
  Node2 [label="llvm::slpvectorizer\l::BoUpSLP::TreeEntry",height=0.2,width=0.4,color="black",tooltip=" "];
  Node3 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Scalars" ,fontname="Helvetica"];
  Node3 [label="llvm::SmallVector\<\l Value *, 8 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="llvm::SmallVectorTemplate\lBase\< T, bool \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorTemplateBase.html",tooltip="SmallVectorTemplateBase<TriviallyCopyable = false> - This is where we put method implementations that..."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::SmallVectorTemplate\lCommon\< T, typename \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorTemplateCommon.html",tooltip="This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::SmallVectorBase",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorBase.html",tooltip="This is all the non-templated stuff common to all SmallVectors."];
  Node8 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" BeginX" ,fontname="Helvetica"];
  Node8 [label="void *",height=0.2,width=0.4,color="black",tooltip=" "];
  Node9 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Capacity\nSize" ,fontname="Helvetica"];
  Node9 [label="unsigned",height=0.2,width=0.4,color="black",URL="$classunsigned.html",tooltip=" "];
  Node10 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node11 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node11 [label="llvm::AlignedCharArrayUnion\< T \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AlignedCharArrayUnion.html",tooltip=" "];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::AlignedCharArray\l\< Alignment, Size \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AlignedCharArray.html",tooltip="Helper for building an aligned character array type."];
  Node13 -> Node12 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" buffer" ,fontname="Helvetica"];
  Node13 [label="char",height=0.2,width=0.4,color="black",URL="$classchar.html",tooltip=" "];
  Node14 -> Node11 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< T \>" ,fontname="Helvetica"];
  Node14 [label="llvm::AlignedCharArrayUnion\l\< T1, T2, T3, T4, T5, T6,\l T7, T8, T9, T10 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AlignedCharArrayUnion.html",tooltip="This union template exposes a suitably aligned and sized character array member which can hold elemen..."];
  Node15 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="llvm::AlignedCharArray\l\< Alignment, Size \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AlignedCharArray.html",tooltip="Helper for building an aligned character array type."];
  Node13 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" buffer" ,fontname="Helvetica"];
  Node16 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< Value *, 8 \>" ,fontname="Helvetica"];
  Node16 [label="llvm::SmallVector\<\l T, N \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip="This is a 'vector' (really, a variable-sized array), optimized for the case when the array is small."];
  Node17 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node5 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 -> Node16 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node11 -> Node18 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node19 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" VectorizedValue" ,fontname="Helvetica"];
  Node19 [label="llvm::Value",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Value.html",tooltip="LLVM Value Representation."];
  Node9 -> Node19 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" HasDescriptor\nHasHungOffUses\nHasName\nIsUsedByMD\nMaxAlignmentExponent\nMaximumAlignment\nNumUserOperands\nSubclassOptionalData" ,fontname="Helvetica"];
  Node20 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" NeedToGather" ,fontname="Helvetica"];
  Node20 [label="bool",height=0.2,width=0.4,color="black",URL="$classbool.html",tooltip=" "];
  Node21 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ReuseShuffleIndices" ,fontname="Helvetica"];
  Node21 [label="llvm::SmallVector\<\l unsigned, 4 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node22 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node5 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 -> Node21 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node11 -> Node23 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node16 -> Node21 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< unsigned, 4 \>" ,fontname="Helvetica"];
  Node24 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ReorderIndices" ,fontname="Helvetica"];
  Node24 [label="llvm::ArrayRef\< unsigned \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ArrayRef.html",tooltip=" "];
  Node25 -> Node24 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< unsigned \>" ,fontname="Helvetica"];
  Node25 [label="llvm::ArrayRef\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ArrayRef.html",tooltip="ArrayRef - Represent a constant reference to an array (0 or more elements consecutively in memory),..."];
  Node16 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Container" ,fontname="Helvetica"];
  Node26 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" UserTreeIndices" ,fontname="Helvetica"];
  Node26 [label="llvm::SmallVector\<\l llvm::slpvectorizer\l::BoUpSLP::EdgeInfo, 1 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node27 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node5 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 -> Node26 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node11 -> Node28 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node16 -> Node26 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::slpvectorizer\l::BoUpSLP::EdgeInfo, 1 \>" ,fontname="Helvetica"];
  Node29 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Idx" ,fontname="Helvetica"];
  Node29 [label="int",height=0.2,width=0.4,color="black",tooltip=" "];
  Node9 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" EdgeIdx" ,fontname="Helvetica"];
}

digraph "Core"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir=LR;
  Node2 [label="LLVM-C: C interface\l to LLVM",height=0.2,width=0.4,color="black",URL="$group__LLVMC.html",tooltip="This module exposes parts of the LLVM library as a C API."];
  Node1 [label="Core",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="This modules provide an interface to libLLVMCore, which implements the LLVM intermediate representati..."];
  Node4 [label="Contexts",height=0.2,width=0.4,color="black",URL="$group__LLVMCCoreContext.html",tooltip="Contexts are execution states for the core LLVM IR system."];
  Node5 [label="Modules",height=0.2,width=0.4,color="black",URL="$group__LLVMCCoreModule.html",tooltip="Modules represent the top-level structure in an LLVM program."];
  Node6 [label="Types",height=0.2,width=0.4,color="black",URL="$group__LLVMCCoreType.html",tooltip="Types represent the type of a value."];
  Node3 [label="Types and Enumerations",height=0.2,width=0.4,color="black",URL="$group__LLVMCCoreTypes.html",tooltip=" "];
  Node9 [label="Basic Block",height=0.2,width=0.4,color="black",URL="$group__LLVMCCoreValueBasicBlock.html",tooltip="A basic block represents a single entry single exit section of code."];
  Node10 [label="Instructions",height=0.2,width=0.4,color="black",URL="$group__LLVMCCoreValueInstruction.html",tooltip="Functions in this group relate to the inspection and manipulation of individual instructions."];
  Node8 [label="Metadata",height=0.2,width=0.4,color="black",URL="$group__LLVMCCoreValueMetadata.html",tooltip=" "];
  Node7 [label="Values",height=0.2,width=0.4,color="black",URL="$group__LLVMCCoreValues.html",tooltip="The bulk of LLVM's object model consists of values, which comprise a very rich type hierarchy."];
  Node2->Node1 [shape=plaintext, dir="back", style="solid"];
  Node1->Node3 [shape=plaintext, dir="back", style="solid"];
  Node1->Node4 [shape=plaintext, dir="back", style="solid"];
  Node1->Node5 [shape=plaintext, dir="back", style="solid"];
  Node1->Node6 [shape=plaintext, dir="back", style="solid"];
  Node1->Node7 [shape=plaintext, dir="back", style="solid"];
  Node1->Node8 [shape=plaintext, dir="back", style="solid"];
  Node1->Node9 [shape=plaintext, dir="back", style="solid"];
  Node1->Node10 [shape=plaintext, dir="back", style="solid"];
}

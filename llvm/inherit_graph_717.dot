digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape="box"];
  rankdir="LR";
  Node0 [label="llvm::bf_iterator_storage\l\< SetType \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1bf__iterator__storage.html",tooltip=" "];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="llvm::bf_iterator\<\l GraphT, SetType, GT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1bf__iterator.html",tooltip=" "];
  Node5 [label="llvm::df_iterator_storage\l\< SetType, External \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1df__iterator__storage.html",tooltip=" "];
  Node5 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::df_iterator\<\l std::conditional\< IsConst,\l const BlockT, BlockT \>\l::type * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1df__iterator.html",tooltip=" "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::RegionBase\< Tr\l \>::block_iterator_wrapper\l\< IsConst \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1RegionBase_1_1block__iterator__wrapper.html",tooltip=" "];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::df_iterator\<\l T, std::set\< typename\l GraphTraits\< T \>::NodeRef\l \>, true \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1df__iterator.html",tooltip=" "];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::df_iterator\<\l Inverse\< T \>, std::\lset\< typename GraphTraits\l\< T \>::NodeRef \>, External \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1df__iterator.html",tooltip=" "];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::df_iterator\<\l Inverse\< T \>, df_iterator\l_default_set\< typename GraphTraits\l\< T \>::NodeRef \>, false \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1df__iterator.html",tooltip=" "];
  Node5 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::df_iterator\<\l GraphT, SetType, ExtStorage, GT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1df__iterator.html",tooltip=" "];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="llvm::idf_iterator\l\< T, std::set\< typename\l GraphTraits\< T \>::NodeRef\l \>, true \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1idf__iterator.html",tooltip=" "];
  Node9 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::df_ext_iterator\l\< T, SetTy \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1df__ext__iterator.html",tooltip=" "];
  Node9 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::idf_iterator\l\< T, SetTy, External \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1idf__iterator.html",tooltip=" "];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::idf_ext_iterator\l\< T, SetTy \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1idf__ext__iterator.html",tooltip=" "];
  Node2 [label="std::iterator",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="llvm::iterator_facade\l_base\< partition_iterator,\l std::forward_iterator_tag,\l Partition \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="AllocaSlices::partition\l_iterator",height=0.2,width=0.4,color="black",URL="$classAllocaSlices_1_1partition__iterator.html",tooltip="An iterator over partitions of the alloca's slices."];
  Node2 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="llvm::iterator_facade\l_base\< IteratorImpl\<\l ValueT, IteratorBase\l \>, std::bidirectional\l_iterator_tag, ValueT, typename\l std::iterator_traits\< IteratorBase\l \>::difference_type, typename std\l::conditional\< std::is_same\< ValueT,\l typename std::iterator_traits\< IteratorBase\l \>::value_type \>::value, typename std::iterator\l_traits\< IteratorBase \>::pointer, ValueT * \>\l::type, typename std::conditional\< std::is_same\l\< ValueT, typename std::iterator_traits\< IteratorBase\l \>::value_type \>::value, typename std::iterator_traits\l\< IteratorBase \>::reference, ValueT & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="llvm::iterator_facade\l_base\< phi_iterator_impl\l\< PHINode, iterator \>, std\l::forward_iterator_tag, PHINode \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="llvm::iterator_facade\l_base\< const_succ_op\l_iterator, std::random\l_access_iterator_tag, const\l BasicBlock *, ptrdiff_t,\l const BasicBlock *, const\l BasicBlock * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="llvm::iterator_facade\l_base\< succ_op_iterator,\l std::random_access_iterator\l_tag, BasicBlock *, ptrdiff\l_t, BasicBlock *, BasicBlock * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="llvm::iterator_facade\l_base\< const_value_iterator,\l std::forward_iterator_tag,\l const DIEValue, typename std\l::iterator_traits\< ListTy::const\l_iterator \>::difference_type, typename\l std::conditional\< std::is_same\< const\l DIEValue, typename std::iterator_traits\l\< ListTy::const_iterator \>::value_type \>\l::value, typename std::iterator_traits\< ListTy\l::const_iterator \>::pointer, const DIEValue *\l \>::type, typename std::conditional\< std::is_same\l\< const DIEValue, typename std::iterator_traits\<\l ListTy::const_iterator \>::value_type \>::value, typename\l std::iterator_traits\< ListTy::const_iterator \>::reference,\l const DIEValue & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="llvm::iterator_facade\l_base\< value_iterator,\l std::forward_iterator\l_tag, DIEValue, typename\l std::iterator_traits\< ListTy\l::iterator \>::difference_type,\l typename std::conditional\< std\l::is_same\< DIEValue, typename std\l::iterator_traits\< ListTy::iterator\l \>::value_type \>::value, typename std\l::iterator_traits\< ListTy::iterator \>\l::pointer, DIEValue * \>::type, typename\l std::conditional\< std::is_same\< DIEValue,\l typename std::iterator_traits\< ListTy::iterator\l \>::value_type \>::value, typename std::iterator\l_traits\< ListTy::iterator \>::reference, DIEValue & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="llvm::iterator_facade\l_base\< attribute_iterator,\l std::forward_iterator_tag,\l const DWARFAttribute \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node22 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="llvm::DWARFDie::attribute\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DWARFDie_1_1attribute__iterator.html",tooltip=" "];
  Node2 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="llvm::iterator_facade\l_base\< iterator, std\l::bidirectional_iterator\l_tag, const DWARFDie \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node24 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="llvm::DWARFDie::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DWARFDie_1_1iterator.html",tooltip=" "];
  Node2 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="llvm::iterator_facade\l_base\< iterator, std\l::forward_iterator_tag,\l Operation \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node26 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="llvm::DWARFExpression\l::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DWARFExpression_1_1iterator.html",tooltip="An iterator to go through the expression operations."];
  Node2 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="llvm::iterator_facade\l_base\< FixedStreamArrayIterator\l\< T \>, std::random_access_iterator\l_tag, const T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node28 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="llvm::FixedStreamArrayIterator\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FixedStreamArrayIterator.html",tooltip=" "];
  Node2 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="llvm::iterator_facade\l_base\< ChildIteratorType,\l typename std::iterator\l_traits\< SmallVector\< BoUpSLP\l::EdgeInfo, 1 \>::iterator \>\l::iterator_category, typename\l std::iterator_traits\< SmallVector\l\< BoUpSLP::EdgeInfo, 1 \>::iterator\l \>::value_type, typename std::iterator\l_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::difference_type, typename\l std::conditional\< std::is_same\< typename std\l::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type, typename std::iterator\l_traits\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator\l \>::value_type \>::value, typename std::iterator_traits\l\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::pointer,\l typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type * \>::type, typename std::conditional\l\< std::is_same\< typename std::iterator_traits\< SmallVector\< BoUpSLP\l::EdgeInfo, 1 \>::iterator \>::value_type, typename std::iterator_traits\l\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::value_type \>::value,\l typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator\l \>::reference, typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="llvm::iterator_facade\l_base\< ImutAVLValueIterator\l\< ImmutableMap \>, std::iterator\l_traits\< T::TreeTy::iterator\l \>::iterator_category, const T\l::value_type, typename std::iterator\l_traits\< T::TreeTy::iterator \>::difference\l_type, typename std::conditional\< std::is\l_same\< const T::value_type, typename std::\literator_traits\< T::TreeTy::iterator \>::value\l_type \>::value, typename std::iterator_traits\l\< T::TreeTy::iterator \>::pointer, const T::value\l_type * \>::type, typename std::conditional\< std\l::is_same\< const T::value_type, typename std::iterator\l_traits\< T::TreeTy::iterator \>::value_type \>::value,\l typename std::iterator_traits\< T::TreeTy::iterator \>\l::reference, const T::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="llvm::iterator_facade\l_base\< ImutAVLValueIterator\l\< ImmutableMapRef \>, std\l::iterator_traits\< T::TreeTy\l::iterator \>::iterator_category,\l const T::value_type, typename\l std::iterator_traits\< T::TreeTy\l::iterator \>::difference_type, typename\l std::conditional\< std::is_same\< const\l T::value_type, typename std::iterator\l_traits\< T::TreeTy::iterator \>::value_type\l \>::value, typename std::iterator_traits\<\l T::TreeTy::iterator \>::pointer, const T::value\l_type * \>::type, typename std::conditional\< std\l::is_same\< const T::value_type, typename std::iterator\l_traits\< T::TreeTy::iterator \>::value_type \>::value,\l typename std::iterator_traits\< T::TreeTy::iterator \>\l::reference, const T::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="llvm::iterator_facade\l_base\< ImutAVLValueIterator\l\< T \>, std::iterator_traits\l\< T::TreeTy::iterator \>::iterator\l_category, const T::value_type,\l typename std::iterator_traits\<\l T::TreeTy::iterator \>::difference\l_type, typename std::conditional\< std\l::is_same\< const T::value_type, typename\l std::iterator_traits\< T::TreeTy::iterator\l \>::value_type \>::value, typename std::iterator\l_traits\< T::TreeTy::iterator \>::pointer, const\l T::value_type * \>::type, typename std::conditional\l\< std::is_same\< const T::value_type, typename std\l::iterator_traits\< T::TreeTy::iterator \>::value_type\l \>::value, typename std::iterator_traits\< T::TreeTy::\literator \>::reference, const T::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="llvm::iterator_facade\l_base\< const_iterator,\l std::forward_iterator\l_tag, const T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node34 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="llvm::IntrusiveBackList\l\< T \>::const_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IntrusiveBackList_1_1const__iterator.html",tooltip=" "];
  Node2 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="llvm::iterator_facade\l_base\< iterator, std\l::forward_iterator_tag, T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node36 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="llvm::IntrusiveBackList\l\< T \>::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IntrusiveBackList_1_1iterator.html",tooltip=" "];
  Node2 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="llvm::iterator_facade\l_base\< call_iterator,\l std::forward_iterator\l_tag, typename std::iterator\l_traits\< VectorImplT::iterator\l \>::value_type, typename std::\literator_traits\< VectorImplT::iterator\l \>::difference_type, typename std::conditional\l\< std::is_same\< typename std::iterator_traits\l\< VectorImplT::iterator \>::value_type, typename\l std::iterator_traits\< VectorImplT::iterator \>\l::value_type \>::value, typename std::iterator_traits\l\< VectorImplT::iterator \>::pointer, typename std::iterator\l_traits\< VectorImplT::iterator \>::value_type * \>::type,\l typename std::conditional\< std::is_same\< typename std::iterator\l_traits\< VectorImplT::iterator \>::value_type, typename std::iterator\l_traits\< VectorImplT::iterator \>::value_type \>::value, typename std\l::iterator_traits\< VectorImplT::iterator \>::reference, typename std\l::iterator_traits\< VectorImplT::iterator \>::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="llvm::iterator_facade\l_base\< iterator, std\l::forward_iterator_tag,\l typename std::iterator\l_traits\< VectorImplT::iterator\l \>::value_type, typename std\l::iterator_traits\< VectorImplT\l::iterator \>::difference_type,\l typename std::conditional\< std\l::is_same\< typename std::iterator\l_traits\< VectorImplT::iterator \>::\lvalue_type, typename std::iterator\l_traits\< VectorImplT::iterator \>::value\l_type \>::value, typename std::iterator\l_traits\< VectorImplT::iterator \>::pointer,\l typename std::iterator_traits\< VectorImplT\l::iterator \>::value_type * \>::type, typename\l std::conditional\< std::is_same\< typename std\l::iterator_traits\< VectorImplT::iterator \>::value\l_type, typename std::iterator_traits\< VectorImplT\l::iterator \>::value_type \>::value, typename std::iterator\l_traits\< VectorImplT::iterator \>::reference, typename std\l::iterator_traits\< VectorImplT::iterator \>::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="llvm::iterator_facade\l_base\< postorder_ref\l_scc_iterator, std::forward\l_iterator_tag, RefSCC \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node40 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="llvm::LazyCallGraph\l::postorder_ref_scc\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LazyCallGraph_1_1postorder__ref__scc__iterator.html",tooltip="A post-order depth-first RefSCC iterator over the call graph."];
  Node2 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="llvm::iterator_facade\l_base\< WrappedSuccIterator,\l std::iterator_traits\< succ\l_iterator \>::iterator_category,\l NodeRef, std::ptrdiff_t, NodeRef\l *, NodeRef \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="llvm::iterator_facade\l_base\< const_export_iterator,\l std::forward_iterator_tag,\l const Symbol *, typename std\l::iterator_traits\< const_symbol\l_iterator \>::difference_type, typename\l std::conditional\< std::is_same\< const\l Symbol *, typename std::iterator_traits\l\< const_symbol_iterator \>::value_type \>\l::value, typename std::iterator_traits\< const\l_symbol_iterator \>::pointer, const Symbol **\l \>::type, typename std::conditional\< std::is\l_same\< const Symbol *, typename std::iterator\l_traits\< const_symbol_iterator \>::value_type \>\l::value, typename std::iterator_traits\< const_symbol\l_iterator \>::reference, const Symbol *& \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="llvm::iterator_facade\l_base\< const_symbol_iterator,\l std::forward_iterator_tag,\l const Symbol *, ptrdiff_t,\l const Symbol *, const Symbol * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="llvm::iterator_facade\l_base\< const_undefined\l_iterator, std::forward\l_iterator_tag, const Symbol\l *, typename std::iterator\l_traits\< const_symbol_iterator\l \>::difference_type, typename\l std::conditional\< std::is_same\l\< const Symbol *, typename std::\literator_traits\< const_symbol_iterator\l \>::value_type \>::value, typename std\l::iterator_traits\< const_symbol_iterator\l \>::pointer, const Symbol ** \>::type, typename\l std::conditional\< std::is_same\< const Symbol\l *, typename std::iterator_traits\< const_symbol\l_iterator \>::value_type \>::value, typename std::\literator_traits\< const_symbol_iterator \>::reference,\l const Symbol *& \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="llvm::iterator_facade\l_base\< iterator, std\l::forward_iterator_tag,\l const entry \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node46 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="llvm::Registry\< T \>\l::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Registry_1_1iterator.html",tooltip="Iterators for registry entries."];
  Node2 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="llvm::iterator_facade\l_base\< value_op_iterator,\l std::random_access_iterator\l_tag, SDValue, ptrdiff_t, value\l_op_iterator *, value_op_iterator * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="llvm::iterator_facade\l_base\< SmallSetIterator\l\< T, N, C \>, std::forward\l_iterator_tag, T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node49 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="llvm::SmallSetIterator\l\< T, N, C \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallSetIterator.html",tooltip="SmallSetIterator - This class implements a const_iterator for SmallSet by delegating to the underlyin..."];
  Node2 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="llvm::iterator_facade\l_base\< StringMapConstIterator\l\< ValueTy \>, std::forward\l_iterator_tag, const StringMapEntry\l\< ValueTy \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="llvm::iterator_facade\l_base\< DerivedTy, std\l::forward_iterator_tag,\l ValueTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node52 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="llvm::StringMapIterBase\l\< DerivedTy, ValueTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StringMapIterBase.html",tooltip=" "];
  Node2 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="llvm::iterator_facade\l_base\< StringMapIterator\l\< ValueTy \>, std::forward\l_iterator_tag, StringMapEntry\l\< ValueTy \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="llvm::iterator_facade\l_base\< StringMapKeyIterator\l\< ValueTy \>, std::forward\l_iterator_tag, StringRef,\l typename std::iterator_traits\l\< StringMapConstIterator\< ValueTy\l \> \>::difference_type, typename std\l::conditional\< std::is_same\< StringRef,\l typename std::iterator_traits\< StringMapConstIterator\l\< ValueTy \> \>::value_type \>::value, typename std\l::iterator_traits\< StringMapConstIterator\< ValueTy\l \> \>::pointer, StringRef * \>::type, typename std::conditional\l\< std::is_same\< StringRef, typename std::iterator_traits\l\< StringMapConstIterator\< ValueTy \> \>::value_type \>::value,\l typename std::iterator_traits\< StringMapConstIterator\< ValueTy\l \> \>::reference, StringRef & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="llvm::iterator_facade\l_base\< SuccIterator\<\l InstructionT, BlockT\l \>, std::random_access\l_iterator_tag, BlockT, int,\l BlockT *, BlockT * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node56 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node57 [label="llvm::SuccIterator\l\< InstructionT, BlockT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SuccIterator.html",tooltip=" "];
  Node2 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node58 [label="llvm::iterator_facade\l_base\< CaseIteratorImpl\l\< CaseHandleT \>, std::random\l_access_iterator_tag, CaseHandleT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node58 -> Node59 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node59 [label="llvm::SwitchInst::CaseIterator\lImpl\< CaseHandleT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SwitchInst_1_1CaseIteratorImpl.html",tooltip=" "];
  Node2 -> Node60 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node60 [label="llvm::iterator_facade\l_base\< const_value_op\l_iterator, std::random\l_access_iterator_tag, const\l Value *, ptrdiff_t, const\l Value *, const Value * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node61 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node61 [label="llvm::iterator_facade\l_base\< value_op_iterator,\l std::random_access_iterator\l_tag, Value *, ptrdiff_t, Value\l *, Value * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node62 [label="llvm::iterator_facade\l_base\< VarStreamArrayIterator\l\< ValueType, Extractor \>,\l std::forward_iterator_tag,\l ValueType \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node62 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node63 [label="llvm::VarStreamArrayIterator\l\< ValueType, Extractor \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VarStreamArrayIterator.html",tooltip="VarStreamArray represents an array of variable length records backed by a stream."];
  Node2 -> Node64 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node64 [label="llvm::iterator_facade\l_base\< WrappedPairNodeDataIterator\l\< ItType, NodeRef, DataRef \>,\l std::iterator_traits\< ItType\l \>::iterator_category, NodeRef,\l std::ptrdiff_t, NodeRef *, NodeRef & \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node65 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node65 [label="llvm::iterator_facade\l_base\< BinaryAnnotationIterator,\l std::forward_iterator_tag,\l DecodedAnnotation \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node65 -> Node66 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node66 [label="llvm::codeview::BinaryAnnotation\lIterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1codeview_1_1BinaryAnnotationIterator.html",tooltip=" "];
  Node2 -> Node67 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node67 [label="llvm::iterator_facade\l_base\< concat_iterator\l\< ValueT, IterTs... \>,\l std::forward_iterator_tag,\l ValueT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node67 -> Node68 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node68 [label="llvm::concat_iterator\l\< ValueT, IterTs \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1concat__iterator.html",tooltip="Iterator wrapper that concatenates sequences together."];
  Node2 -> Node69 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node69 [label="llvm::iterator_facade\l_base\< FunctionRecordIterator,\l std::forward_iterator_tag,\l FunctionRecord \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node69 -> Node70 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node70 [label="llvm::coverage::Function\lRecordIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1coverage_1_1FunctionRecordIterator.html",tooltip="Iterator over Functions, optionally filtered to a single file."];
  Node2 -> Node71 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node71 [label="llvm::iterator_facade\l_base\< LineCoverageIterator,\l std::forward_iterator_tag,\l LineCoverageStats \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node71 -> Node72 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node72 [label="llvm::coverage::LineCoverage\lIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1coverage_1_1LineCoverageIterator.html",tooltip="An iterator over the LineCoverageStats objects for lines described by a CoverageData instance."];
  Node2 -> Node73 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node73 [label="llvm::iterator_facade\l_base\< def_chain_iterator\l\< T, false \>, std::forward\l_iterator_tag, MemoryAccess * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node74 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node74 [label="llvm::iterator_facade\l_base\< enumerator_iter\l\< R \>, std::forward_iterator\l_tag, result_pair\< R \>, std\l::iterator_traits\< IterOfRange\l\< R \> \>::difference_type, std\l::iterator_traits\< IterOfRange\l\< R \> \>::pointer, std::iterator\l_traits\< IterOfRange\< R \> \>::reference \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node74 -> Node75 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node75 [label="llvm::detail::enumerator\l_iter\< R \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1detail_1_1enumerator__iter.html",tooltip=" "];
  Node2 -> Node76 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node76 [label="llvm::iterator_facade\l_base\< value_sequence\l_iterator\< ValueT \>, std\l::random_access_iterator\l_tag, const ValueT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node76 -> Node77 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node77 [label="llvm::detail::value\l_sequence_iterator\<\l ValueT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1detail_1_1value__sequence__iterator.html",tooltip=" "];
  Node2 -> Node78 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node78 [label="llvm::iterator_facade\l_base\< zip_longest_iterator\l\< Iters... \>, std::common\l_type\< std::forward_iterator\l_tag, std::iterator_traits\<\l Iters \>::iterator_category...\l \>::type, ZipLongestTupleType\<\l Iters... \>::type, std::iterator\l_traits\< std::tuple_element\< 0, std\l::tuple\< Iters... \> \>::type \>::difference\l_type, ZipLongestTupleType\< Iters... \>\l::type *, ZipLongestTupleType\< Iters... \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node78 -> Node79 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node79 [label="llvm::detail::zip_longest\l_iterator\< Iters \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1detail_1_1zip__longest__iterator.html",tooltip=" "];
  Node2 -> Node80 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node80 [label="llvm::iterator_facade\l_base\< early_inc_iterator\l_impl\< WrappedIteratorT\l \>, std::input_iterator_tag,\l typename std::iterator_traits\l\< WrappedIteratorT \>::value_type,\l typename std::iterator_traits\<\l WrappedIteratorT \>::difference_type,\l typename std::conditional\< std::is\l_same\< typename std::iterator_traits\l\< WrappedIteratorT \>::value_type, typename\l std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator\l_traits\< WrappedIteratorT \>::pointer, typename\l std::iterator_traits\< WrappedIteratorT \>::value\l_type * \>::type, typename std::conditional\< std::\lis_same\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node81 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node81 [label="llvm::iterator_facade\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>,\l std::common_type\< IterTag,\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category \>::type, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::difference_type, typename\l std::conditional\< std::is_same\< typename std::\literator_traits\< WrappedIteratorT \>::value_type,\l typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\l\< WrappedIteratorT \>::pointer, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type * \>::type, typename\l std::conditional\< std::is_same\< typename std::iterator_traits\l\< WrappedIteratorT \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename std::iterator\l_traits\< WrappedIteratorT \>::reference, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node82 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node82 [label="llvm::iterator_facade\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>, std::common\l_type\< std::forward_iterator\l_tag, std::iterator_traits\< WrappedIterator\lT \>::iterator_category \>::type, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::difference_type, typename\l std::conditional\< std::is_same\< typename std::\literator_traits\< WrappedIteratorT \>::value_type,\l typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\l\< WrappedIteratorT \>::pointer, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type * \>::type, typename\l std::conditional\< std::is_same\< typename std::iterator_traits\l\< WrappedIteratorT \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename std::iterator\l_traits\< WrappedIteratorT \>::reference, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node83 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node83 [label="llvm::iterator_facade\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>, std::common\l_type\< std::bidirectional_iterator\l_tag, std::iterator_traits\< WrappedIterator\lT \>::iterator_category \>::type, typename\l std::iterator_traits\< WrappedIteratorT \>\l::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::difference_type, typename\l std::conditional\< std::is_same\< typename std::\literator_traits\< WrappedIteratorT \>::value_type,\l typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\l\< WrappedIteratorT \>::pointer, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type * \>::type, typename\l std::conditional\< std::is_same\< typename std::iterator_traits\l\< WrappedIteratorT \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename std::iterator\l_traits\< WrappedIteratorT \>::reference, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node84 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node84 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, typename std::conditional\< std::is\l_same\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::pointer, typename std::iterator_traits\< WrappedIteratorT \>::value\l_type * \>::type, typename std::conditional\< std::is_same\< typename std\l::iterator_traits\< WrappedIteratorT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type \>::value, typename std::iterator\l_traits\< WrappedIteratorT \>::reference, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node85 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node85 [label="llvm::iterator_facade\l_base\< defined_atom_iterator\l_impl\< SecItrT, AtomItrT,\l T \>, std::forward_iterator\l_tag, T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node85 -> Node86 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node86 [label="llvm::jitlink::AtomGraph\l::defined_atom_iterator\l_impl\< SecItrT, AtomItrT, T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1jitlink_1_1AtomGraph_1_1defined__atom__iterator__impl.html",tooltip=" "];
  Node2 -> Node87 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node87 [label="llvm::iterator_facade\l_base\< memoryaccess_def\l_iterator_base\< T \>, std\l::forward_iterator_tag, T,\l ptrdiff_t, T *, T * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node87 -> Node88 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node88 [label="llvm::memoryaccess\l_def_iterator_base\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1memoryaccess__def__iterator__base.html",tooltip="Iterator base class used to implement const and non-const iterators over the defining accesses of a M..."];
  Node2 -> Node89 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node89 [label="llvm::iterator_facade\l_base\< DbiModuleSourceFiles\lIterator, std::random_access\l_iterator_tag, StringRef \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node89 -> Node90 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node90 [label="llvm::pdb::DbiModuleSource\lFilesIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1pdb_1_1DbiModuleSourceFilesIterator.html",tooltip=" "];
  Node2 -> Node91 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node91 [label="llvm::iterator_facade\l_base\< GSIHashIterator,\l std::random_access_iterator\l_tag, const uint32_t, typename\l std::iterator_traits\< FixedStreamArray\lIterator\< PSHashRecord \> \>::difference\l_type, typename std::conditional\< std\l::is_same\< const uint32_t, typename std\l::iterator_traits\< FixedStreamArrayIterator\l\< PSHashRecord \> \>::value_type \>::value, typename\l std::iterator_traits\< FixedStreamArrayIterator\l\< PSHashRecord \> \>::pointer, const uint32_t * \>\l::type, typename std::conditional\< std::is_same\<\l const uint32_t, typename std::iterator_traits\< FixedStreamArrayIterator\l\< PSHashRecord \> \>::value_type \>::value, typename std::iterator\l_traits\< FixedStreamArrayIterator\< PSHashRecord \> \>::reference,\l const uint32_t & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node92 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node92 [label="llvm::iterator_facade\l_base\< FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const PSHashRecord \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node93 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node93 [label="llvm::iterator_facade\l_base\< HashTableIterator\l\< ValueT \>, std::forward\l_iterator_tag, const std\l::pair\< uint32_t, ValueT \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node93 -> Node94 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node94 [label="llvm::pdb::HashTableIterator\l\< ValueT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1pdb_1_1HashTableIterator.html",tooltip=" "];
  Node2 -> Node95 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node95 [label="llvm::iterator_facade\l_base\< scc_iterator\<\l GraphT, GraphTraits\<\l GraphT \> \>, std::forward\l_iterator_tag, const std\l::vector\< GT::NodeRef \>, ptrdiff_t \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node96 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node96 [label="llvm::iterator_facade\l_base\< const_iterator,\l std::input_iterator_tag,\l const StringRef \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node96 -> Node97 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node97 [label="llvm::sys::path::const\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1sys_1_1path_1_1const__iterator.html",tooltip="Path iterator."];
  Node2 -> Node98 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node98 [label="llvm::iterator_facade\l_base\< reverse_iterator,\l std::input_iterator_tag,\l const StringRef \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node98 -> Node99 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node99 [label="llvm::sys::path::reverse\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1sys_1_1path_1_1reverse__iterator.html",tooltip="Reverse path iterator."];
  Node2 -> Node100 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node100 [label="llvm::iterator_facade\l_base\< upward_defs_iterator,\l std::forward_iterator_tag,\l const MemoryAccessPair \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node100 -> Node101 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node101 [label="llvm::upward_defs_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1upward__defs__iterator.html",tooltip="Provide an iterator that walks defs, giving both the memory access, and the current pointer location,..."];
  Node2 -> Node102 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node102 [label="llvm::iterator_facade\l_base\< NeighborEdgeIterator\lT\< IsConst, IsOut \>, std\l::iterator_traits\< typename\l NeighborSetT::const_iterator\l \>::iterator_category, typename\l std::conditional\< IsConst, const\l EdgeValueType, EdgeValueType \>::type,\l typename std::iterator_traits\< typename\l NeighborSetT::const_iterator \>::difference\l_type, typename std::conditional\< std::is_same\l\< typename std::conditional\< IsConst, const EdgeValueType,\l EdgeValueType \>::type, typename std::iterator_traits\l\< typename NeighborSetT::const_iterator \>::value_type\l \>::value, typename std::iterator_traits\< typename NeighborSetT\l::const_iterator \>::pointer, typename std::conditional\< IsConst,\l const EdgeValueType, EdgeValueType \>::type * \>::type, typename\l std::conditional\< std::is_same\< typename std::conditional\< IsConst,\l const EdgeValueType, EdgeValueType \>::type, typename std::iterator\l_traits\< typename NeighborSetT::const_iterator \>::value_type \>::value,\l typename std::iterator_traits\< typename NeighborSetT::const_iterator\l \>::reference, typename std::conditional\< IsConst, const EdgeValueType,\l EdgeValueType \>::type & \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node103 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node103 [label="llvm::iterator_facade\l_base\< reverse_iterator\l\< llvm::DWARFDie::iterator\l \>, bidirectional_iterator\l_tag, const llvm::DWARFDie \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node103 -> Node104 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node104 [label="std::reverse_iterator\l\< llvm::DWARFDie::iterator \>",height=0.2,width=0.4,color="black",URL="$classstd_1_1reverse__iterator_3_01llvm_1_1DWARFDie_1_1iterator_01_4.html",tooltip=" "];
  Node2 -> Node105 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node105 [label="llvm::iterator_facade\l_base\< memoryaccess_def\l_iterator_base\< MemoryAccess\l \>, std::forward_iterator_tag,\l MemoryAccess, ptrdiff_t, MemoryAccess\l *, MemoryAccess * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node2 -> Node106 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node106 [label="llvm::po_iterator\<\l Inverse\< T \>, std::\lset\< typename GraphTraits\l\< T \>::NodeRef \>, External \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1po__iterator.html",tooltip=" "];
  Node2 -> Node108 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node108 [label="llvm::po_iterator\<\l Inverse\< T \>, std::\lset\< typename GraphTraits\l\< T \>::NodeRef \>, false \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1po__iterator.html",tooltip=" "];
  Node2 -> Node109 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node109 [label="llvm::po_iterator\<\l T, std::set\< typename\l GraphTraits\< T \>::NodeRef\l \>, true \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1po__iterator.html",tooltip=" "];
  Node2 -> Node115 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node115 [label="llvm::AliasSet::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AliasSet_1_1iterator.html",tooltip="Define an iterator for alias sets... this is just a forward iterator."];
  Node2 -> Node116 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node116 [label="llvm::AppleAcceleratorTable\l::ValueIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AppleAcceleratorTable_1_1ValueIterator.html",tooltip=" "];
  Node2 -> Node117 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node117 [label="llvm::DIExpression\l::expr_op_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DIExpression_1_1expr__op__iterator.html",tooltip="An iterator for expression operands."];
  Node2 -> Node118 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node118 [label="llvm::DITypeRefArray\l::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DITypeRefArray_1_1iterator.html",tooltip=" "];
  Node2 -> Node119 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node119 [label="llvm::DWARFDebugNames\l::ValueIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DWARFDebugNames_1_1ValueIterator.html",tooltip=" "];
  Node2 -> Node120 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node120 [label="llvm::EquivalenceClasses\l\< ElemTy \>::member_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1EquivalenceClasses_1_1member__iterator.html",tooltip=" "];
  Node2 -> Node121 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node121 [label="llvm::GVNExpression\l::int_op_inserter",height=0.2,width=0.4,color="black",URL="$classllvm_1_1GVNExpression_1_1int__op__inserter.html",tooltip=" "];
  Node2 -> Node122 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node122 [label="llvm::GVNExpression\l::op_inserter",height=0.2,width=0.4,color="black",URL="$classllvm_1_1GVNExpression_1_1op__inserter.html",tooltip=" "];
  Node2 -> Node123 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node123 [label="llvm::ImutAVLTreeGeneric\lIterator\< ImutInfo \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImutAVLTreeGenericIterator.html",tooltip=" "];
  Node2 -> Node124 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node124 [label="llvm::ImutAVLTreeInOrder\lIterator\< ImutInfo \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImutAVLTreeInOrderIterator.html",tooltip=" "];
  Node2 -> Node125 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node125 [label="llvm::InstrProfIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InstrProfIterator.html",tooltip="A file format agnostic iterator over profiling data."];
  Node2 -> Node126 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node126 [label="llvm::IntervalMap\<\l KeyT, ValT, N, Traits\l \>::const_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IntervalMap_1_1const__iterator.html",tooltip=" "];
  Node126 -> Node127 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node127 [label="llvm::IntervalMap\<\l KeyT, ValT, N, Traits\l \>::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IntervalMap_1_1iterator.html",tooltip=" "];
  Node2 -> Node128 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node128 [label="llvm::MachO::Architecture\lSet::arch_iterator\< Ty \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MachO_1_1ArchitectureSet_1_1arch__iterator.html",tooltip=" "];
  Node2 -> Node129 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node129 [label="llvm::MachineRegisterInfo\l::defusechain_instr_iterator\l\< ReturnUses, ReturnDefs, SkipDebug,\l ByOperand, ByInstr, ByBundle \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MachineRegisterInfo_1_1defusechain__instr__iterator.html",tooltip="defusechain_iterator - This class provides iterator support for machine operands in the function that..."];
  Node2 -> Node130 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node130 [label="llvm::MachineRegisterInfo\l::defusechain_iterator\l\< ReturnUses, ReturnDefs,\l SkipDebug, ByOperand, ByInstr,\l ByBundle \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MachineRegisterInfo_1_1defusechain__iterator.html",tooltip="reg_begin/reg_end - Provide iteration support to walk over all definitions and uses of a register wit..."];
  Node2 -> Node131 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node131 [label="llvm::Module::debug\l_compile_units_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Module_1_1debug__compile__units__iterator.html",tooltip="An iterator for DICompileUnits that skips those marked NoDebug."];
  Node2 -> Node132 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node132 [label="llvm::PredIterator\l\< Ptr, USE_iterator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PredIterator.html",tooltip=" "];
  Node2 -> Node133 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node133 [label="llvm::RNSuccIterator\l\< NodeRef, BlockT, RegionT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1RNSuccIterator.html",tooltip="Hierarchical RegionNode successor iterator."];
  Node2 -> Node134 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node134 [label="llvm::RNSuccIterator\l\< FlatIt\< NodeRef \>,\l BlockT, RegionT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1RNSuccIterator_3_01FlatIt_3_01NodeRef_01_4_00_01BlockT_00_01RegionT_01_4.html",tooltip="Flat RegionNode iterator."];
  Node2 -> Node135 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node135 [label="llvm::SDNode::use_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SDNode_1_1use__iterator.html",tooltip="This class provides iterator support for SDUse operands that use a specific SDNode."];
  Node2 -> Node136 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node136 [label="llvm::SDNodeIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SDNodeIterator.html",tooltip=" "];
  Node2 -> Node137 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node137 [label="llvm::SUnitIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SUnitIterator.html",tooltip=" "];
  Node2 -> Node138 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node138 [label="llvm::SparseMultiSet\l\< ValueT, KeyFunctorT,\l SparseT \>::iterator_base\l\< SMSPtrTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SparseMultiSet_1_1iterator__base.html",tooltip="Our iterators are iterators over the collection of objects that share a key."];
  Node2 -> Node139 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node139 [label="llvm::TargetRegistry\l::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1TargetRegistry_1_1iterator.html",tooltip=" "];
  Node2 -> Node140 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node140 [label="llvm::TypedMDOperandIterator\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1TypedMDOperandIterator.html",tooltip="Typed iterator through MDNode operands."];
  Node2 -> Node141 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node141 [label="llvm::ValueMapConstIterator\l\< DenseMapT, KeyT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ValueMapConstIterator.html",tooltip=" "];
  Node2 -> Node142 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node142 [label="llvm::ValueMapIterator\l\< DenseMapT, KeyT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ValueMapIterator.html",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 -> Node143 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node143 [label="llvm::coverage::Coverage\lMappingIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1coverage_1_1CoverageMappingIterator.html",tooltip="A file format agnostic iterator over coverage mapping data."];
  Node2 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 -> Node144 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node144 [label="llvm::generic_gep_type\l_iterator\< ItTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1generic__gep__type__iterator.html",tooltip=" "];
  Node2 -> Node145 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node145 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node145 -> Node146 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node146 [label="llvm::FixedStreamArrayIterator\l\< PSHashRecord \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FixedStreamArrayIterator.html",tooltip=" "];
  Node145 -> Node147 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node147 [label="llvm::StringMapIterBase\l\< StringMapConstIterator\l\< ValueTy \>, const StringMapEntry\l\< ValueTy \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StringMapIterBase.html",tooltip=" "];
  Node147 -> Node148 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node148 [label="llvm::StringMapConstIterator\l\< ValueTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StringMapConstIterator.html",tooltip=" "];
  Node145 -> Node149 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node149 [label="llvm::StringMapIterBase\l\< StringMapIterator\< ValueTy\l \>, StringMapEntry\< ValueTy \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StringMapIterBase.html",tooltip=" "];
  Node149 -> Node150 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node150 [label="llvm::StringMapIterator\l\< ValueTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StringMapIterator.html",tooltip=" "];
  Node145 -> Node151 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node151 [label="llvm::detail::zip_common\l\< zip_first\< Iters... \>\l, Iters... \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1detail_1_1zip__common.html",tooltip=" "];
  Node151 -> Node152 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node152 [label="llvm::detail::zip_first\l\< Iters \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1detail_1_1zip__first.html",tooltip=" "];
  Node145 -> Node153 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node153 [label="llvm::detail::zip_common\l\< zip_shortest\< Iters...\l \>, Iters... \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1detail_1_1zip__common.html",tooltip=" "];
  Node153 -> Node154 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node154 [label="llvm::detail::zip_shortest\l\< Iters \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1detail_1_1zip__shortest.html",tooltip=" "];
  Node145 -> Node155 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node155 [label="llvm::iterator_adaptor\l_base\< IteratorImpl\< ValueT,\l IteratorBase \>, IteratorBase,\l std::bidirectional_iterator\l_tag, ValueT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node145 -> Node156 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node156 [label="llvm::iterator_adaptor\l_base\< const_succ_op_iterator,\l const_value_op_iterator, std\l::random_access_iterator_tag,\l const BasicBlock *, ptrdiff_t,\l const BasicBlock *, const BasicBlock * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node156 -> Node157 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node157 [label="llvm::BranchInst::const\l_succ_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1BranchInst_1_1const__succ__op__iterator.html",tooltip="The const version of succ_op_iterator."];
  Node156 -> Node158 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node158 [label="llvm::IndirectBrInst\l::const_succ_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1IndirectBrInst_1_1const__succ__op__iterator.html",tooltip="The const version of succ_op_iterator."];
  Node145 -> Node159 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node159 [label="llvm::iterator_adaptor\l_base\< succ_op_iterator,\l value_op_iterator, std\l::random_access_iterator\l_tag, BasicBlock *, ptrdiff\l_t, BasicBlock *, BasicBlock * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node159 -> Node160 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node160 [label="llvm::BranchInst::succ\l_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1BranchInst_1_1succ__op__iterator.html",tooltip="Iterator type that casts an operand to a basic block."];
  Node159 -> Node161 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node161 [label="llvm::IndirectBrInst\l::succ_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1IndirectBrInst_1_1succ__op__iterator.html",tooltip="Iterator type that casts an operand to a basic block."];
  Node145 -> Node162 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node162 [label="llvm::iterator_adaptor\l_base\< const_value_iterator,\l ListTy::const_iterator, std\l::forward_iterator_tag, const\l DIEValue \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node162 -> Node163 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node163 [label="llvm::DIEValueList\l::const_value_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DIEValueList_1_1const__value__iterator.html",tooltip=" "];
  Node145 -> Node164 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node164 [label="llvm::iterator_adaptor\l_base\< value_iterator,\l ListTy::iterator, std\l::forward_iterator_tag,\l DIEValue \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node164 -> Node165 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node165 [label="llvm::DIEValueList\l::value_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DIEValueList_1_1value__iterator.html",tooltip=" "];
  Node145 -> Node166 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node166 [label="llvm::iterator_adaptor\l_base\< ChildIteratorType,\l SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node166 -> Node167 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node167 [label="llvm::GraphTraits\<\l BoUpSLP * \>::ChildIteratorType",height=0.2,width=0.4,color="black",URL="$structllvm_1_1GraphTraits_3_01BoUpSLP_01_5_01_4_1_1ChildIteratorType.html",tooltip="Add the VectorizableTree to the index iterator to be able to return TreeEntry pointers."];
  Node145 -> Node168 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node168 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< ImmutableMap \>, T::TreeTy\l::iterator, std::iterator_traits\l\< T::TreeTy::iterator \>::iterator\l_category, const T::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node145 -> Node169 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node169 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< ImmutableMapRef \>, T::TreeTy\l::iterator, std::iterator_traits\l\< T::TreeTy::iterator \>::iterator\l_category, const T::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node145 -> Node170 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node170 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T::TreeTy\l::iterator \>::iterator_category,\l const T::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node170 -> Node171 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node171 [label="llvm::ImutAVLValueIterator\< T \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip="Generic iterator that wraps a T::TreeTy::iterator and exposes iterator::getValue() on dereference."];
  Node145 -> Node172 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node172 [label="llvm::iterator_adaptor\l_base\< call_iterator,\l VectorImplT::iterator,\l std::forward_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node172 -> Node173 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node173 [label="llvm::LazyCallGraph\l::EdgeSequence::call\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LazyCallGraph_1_1EdgeSequence_1_1call__iterator.html",tooltip="An iterator over specifically call edges."];
  Node145 -> Node174 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node174 [label="llvm::iterator_adaptor\l_base\< iterator, VectorImplT\l::iterator, std::forward_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node174 -> Node175 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node175 [label="llvm::LazyCallGraph\l::EdgeSequence::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LazyCallGraph_1_1EdgeSequence_1_1iterator.html",tooltip="An iterator used for the edges to both entry nodes and child nodes."];
  Node145 -> Node176 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node176 [label="llvm::iterator_adaptor\l_base\< WrappedSuccIterator,\l succ_iterator, std::iterator\l_traits\< succ_iterator \>::iterator\l_category, NodeRef, std::ptrdiff\l_t, NodeRef *, NodeRef \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node176 -> Node177 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node177 [label="llvm::LoopBodyTraits\l::WrappedSuccIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LoopBodyTraits_1_1WrappedSuccIterator.html",tooltip=" "];
  Node145 -> Node178 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node178 [label="llvm::iterator_adaptor\l_base\< const_export_iterator,\l const_symbol_iterator, std\l::forward_iterator_tag, const\l Symbol * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node178 -> Node179 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node179 [label="llvm::MachO::InterfaceFile\l::const_export_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1MachO_1_1InterfaceFile_1_1const__export__iterator.html",tooltip=" "];
  Node145 -> Node180 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node180 [label="llvm::iterator_adaptor\l_base\< const_symbol_iterator,\l SymbolMapType::const_iterator,\l std::forward_iterator_tag, const\l Symbol *, ptrdiff_t, const Symbol\l *, const Symbol * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node180 -> Node181 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node181 [label="llvm::MachO::InterfaceFile\l::const_symbol_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1MachO_1_1InterfaceFile_1_1const__symbol__iterator.html",tooltip=" "];
  Node145 -> Node182 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node182 [label="llvm::iterator_adaptor\l_base\< const_undefined\l_iterator, const_symbol\l_iterator, std::forward\l_iterator_tag, const Symbol * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node182 -> Node183 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node183 [label="llvm::MachO::InterfaceFile\l::const_undefined_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1MachO_1_1InterfaceFile_1_1const__undefined__iterator.html",tooltip=" "];
  Node145 -> Node184 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node184 [label="llvm::iterator_adaptor\l_base\< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, SDValue,\l ptrdiff_t, value_op_iterator\l *, value_op_iterator * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node184 -> Node185 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node185 [label="llvm::SDNode::value\l_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SDNode_1_1value__op__iterator.html",tooltip="Iterator for directly iterating over the operand SDValue's."];
  Node145 -> Node186 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node186 [label="llvm::iterator_adaptor\l_base\< StringMapKeyIterator\l\< ValueTy \>, StringMapConstIterator\l\< ValueTy \>, std::forward_iterator\l_tag, StringRef \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node186 -> Node187 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node187 [label="llvm::StringMapKeyIterator\l\< ValueTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StringMapKeyIterator.html",tooltip=" "];
  Node145 -> Node188 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node188 [label="llvm::iterator_adaptor\l_base\< const_value_op\l_iterator, const_op_iterator,\l std::random_access_iterator\l_tag, const Value *, ptrdiff\l_t, const Value *, const Value * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node188 -> Node189 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node189 [label="llvm::User::const_value\l_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1User_1_1const__value__op__iterator.html",tooltip=" "];
  Node145 -> Node190 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node190 [label="llvm::iterator_adaptor\l_base\< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, Value\l *, ptrdiff_t, Value *, Value * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node190 -> Node191 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node191 [label="llvm::User::value_op\l_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1User_1_1value__op__iterator.html",tooltip="Iterator for directly iterating over the operand Values."];
  Node145 -> Node192 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node192 [label="llvm::iterator_adaptor\l_base\< WrappedPairNodeDataIterator\l\< ItType, NodeRef, DataRef \>,\l ItType, std::iterator_traits\l\< ItType \>::iterator_category,\l NodeRef, std::ptrdiff_t, NodeRef\l *, NodeRef & \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node192 -> Node193 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node193 [label="llvm::WrappedPairNodeData\lIterator\< ItType, NodeRef,\l DataRef \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1WrappedPairNodeDataIterator.html",tooltip=" "];
  Node145 -> Node194 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node194 [label="llvm::iterator_adaptor\l_base\< early_inc_iterator\l_impl\< WrappedIteratorT \>\l, WrappedIteratorT, std::input\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node194 -> Node195 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node195 [label="llvm::early_inc_iterator\l_impl\< WrappedIteratorT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1early__inc__iterator__impl.html",tooltip="A pseudo-iterator adaptor that is designed to implement \"early increment\" style loops."];
  Node145 -> Node196 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node196 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>,\l WrappedIteratorT, std::common\l_type\< IterTag, std::iterator\l_traits\< WrappedIteratorT \>::iterator\l_category \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node196 -> Node197 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node197 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip="An iterator adaptor that filters the elements of given inner iterators."];
  Node197 -> Node198 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node198 [label="llvm::filter_iterator\l_impl\< WrappedIteratorT,\l PredicateT, IterTag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__impl.html",tooltip="Specialization of filter_iterator_base for forward iteration only."];
  Node145 -> Node199 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node199 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>, WrappedIteratorT,\l std::common_type\< std::forward\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node145 -> Node200 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node200 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>, WrappedIteratorT,\l std::common_type\< std::bidirectional\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node145 -> Node201 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node201 [label="llvm::iterator_adaptor\l_base\< mapped_iterator\l\< ItTy, FuncTy \>, ItTy,\l std::iterator_traits\< ItTy\l \>::iterator_category, std\l::remove_reference\< decltype\l(std::declval\< FuncTy \>()(*std\l::declval\< ItTy \>())) \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node145 -> Node202 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node202 [label="llvm::iterator_adaptor\l_base\< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node202 -> Node203 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node203 [label="llvm::pdb::GSIHashIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1pdb_1_1GSIHashIterator.html",tooltip="Iterator over hash records producing symbol record offsets."];
  Node145 -> Node204 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node204 [label="llvm::iterator_adaptor\l_base\< NeighborEdgeIteratorT\l\< IsConst, IsOut \>, typename\l NeighborSetT::const_iterator,\l std::iterator_traits\< typename\l NeighborSetT::const_iterator \>\l::iterator_category, typename std\l::conditional\< IsConst, const EdgeValueType,\l EdgeValueType \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node145 -> Node205 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node205 [label="llvm::memoryaccess\l_def_iterator_base\<\l MemoryAccess \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1memoryaccess__def__iterator__base.html",tooltip=" "];
  Node145 -> Node206 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node206 [label="llvm::BasicBlock::phi\l_iterator_impl\< PHINodeT,\l BBIteratorT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BasicBlock_1_1phi__iterator__impl.html",tooltip="Iterator to walk just the phi nodes in the basic block."];
  Node145 -> Node207 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node207 [label="llvm::def_chain_iterator\l\< T, UseOptimizedChain \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1def__chain__iterator.html",tooltip="Walks the defining accesses of MemoryDefs."];
  Node145 -> Node208 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node208 [label="llvm::detail::zip_common\l\< ZipType, Iters \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1detail_1_1zip__common.html",tooltip=" "];
  Node145 -> Node209 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node209 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node209 -> Node210 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node210 [label="llvm::ImutAVLValueIterator\l\< ImmutableMap \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip=" "];
  Node210 -> Node211 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node211 [label="llvm::ImmutableMap\l\< KeyT, ValT, ValInfo\l \>::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImmutableMap_1_1iterator.html",tooltip=" "];
  Node209 -> Node212 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node212 [label="llvm::ImutAVLValueIterator\l\< ImmutableMapRef \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip=" "];
  Node212 -> Node213 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node213 [label="llvm::ImmutableMapRef\l\< KeyT, ValT, ValInfo\l \>::iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ImmutableMapRef_1_1iterator.html",tooltip=" "];
  Node209 -> Node214 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node214 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node209 -> Node215 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node215 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node215 -> Node216 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node216 [label="llvm::filter_iterator\l_impl\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__impl_3_01WrappedIteratorT_00_01PredicateT_00_01std_1_1bidirectional__iterator__tag_01_4.html",tooltip="Specialization of filter_iterator_base for bidirectional iteration."];
  Node209 -> Node217 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node217 [label="llvm::mapped_iterator\l\< ItTy, FuncTy, FuncReturnTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1mapped__iterator.html",tooltip=" "];
  Node209 -> Node218 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node218 [label="llvm::pointee_iterator\l\< WrappedIteratorT, T \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1pointee__iterator.html",tooltip="An iterator type that allows iterating over the pointees via some other iterator."];
  Node209 -> Node219 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node219 [label="llvm::pointer_iterator\l\< WrappedIteratorT, T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1pointer__iterator.html",tooltip=" "];
  Node145 -> Node220 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node220 [label="llvm::scc_iterator\l\< GraphT, GT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1scc__iterator.html",tooltip="Enumerate the SCCs of a directed graph in reverse topological order of the SCC DAG."];
  Node2 -> Node221 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node221 [label="llvm::line_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1line__iterator.html",tooltip="A forward iterator which reads text lines from a buffer."];
  Node2 -> Node222 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node222 [label="llvm::object::Elf_Note\l_Iterator_Impl\< ELFT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1object_1_1Elf__Note__Iterator__Impl.html",tooltip=" "];
  Node2 -> Node223 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node223 [label="llvm::object::content\l_iterator\< content_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1object_1_1content__iterator.html",tooltip=" "];
  Node223 -> Node224 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node224 [label="llvm::object::elf_relocation\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1object_1_1elf__relocation__iterator.html",tooltip=" "];
  Node223 -> Node225 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node225 [label="llvm::object::elf_section\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1object_1_1elf__section__iterator.html",tooltip=" "];
  Node223 -> Node226 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node226 [label="llvm::object::symbol\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1object_1_1symbol__iterator.html",tooltip=" "];
  Node226 -> Node227 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node227 [label="llvm::object::elf_symbol\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1object_1_1elf__symbol__iterator.html",tooltip=" "];
  Node2 -> Node110 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node110 [label="llvm::po_iterator\<\l GraphT, SetType, ExtStorage, GT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1po__iterator.html",tooltip=" "];
  Node110 -> Node111 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node111 [label="llvm::ipo_iterator\l\< T, std::set\< typename\l GraphTraits\< T \>::NodeRef\l \>, true \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ipo__iterator.html",tooltip=" "];
  Node110 -> Node112 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node112 [label="llvm::ipo_iterator\l\< T, SetType, External \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ipo__iterator.html",tooltip=" "];
  Node112 -> Node113 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node113 [label="llvm::ipo_ext_iterator\l\< T, SetType \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ipo__ext__iterator.html",tooltip=" "];
  Node110 -> Node114 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node114 [label="llvm::po_ext_iterator\l\< T, SetType \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1po__ext__iterator.html",tooltip=" "];
  Node2 -> Node228 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node228 [label="llvm::yaml::basic_collection\l_iterator\< BaseT, ValueT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1yaml_1_1basic__collection__iterator.html",tooltip="This is an iterator abstraction over YAML collections shared by both sequences and maps."];
  Node107 [label="llvm::po_iterator_storage\l\< SetType, External \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1po__iterator__storage.html",tooltip="Default po_iterator_storage implementation with an internal set object."];
  Node107 -> Node106 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node107 -> Node108 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node107 -> Node109 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node107 -> Node110 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
}
